
Protocolos/Ejercicio2/out/Ejercicio2.elf:     file format elf32-littlearm
Protocolos/Ejercicio2/out/Ejercicio2.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001d59

Program Header:
0x70000001 off    0x0000a6cc vaddr 0x1a0026cc paddr 0x1a0026cc align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00008090 vaddr 0x10000090 paddr 0x10000090 align 2**15
         filesz 0x00000000 memsz 0x00000044 flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x000026d4 memsz 0x000026d4 flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a0026d4 align 2**15
         filesz 0x00000090 memsz 0x00000090 flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026cc  1a000000  1a000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  10000000  1a0026d4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00010090  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00010090  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00010090  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00010090  2**2
                  CONTENTS
  6 .bss          00000044  10000090  10000090  00008090  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00010090  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00010090  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00010090  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00010090  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a0026cc  1a0026cc  0000a6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00010090  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00010090  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00010090  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00010090  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00010090  2**2
                  CONTENTS
 17 .noinit       00000000  100000d4  100000d4  00010090  2**2
                  CONTENTS
 18 .debug_info   0000f10d  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00002963  00000000  00000000  0001f19d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 000004d8  00000000  00000000  00021b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 000002f8  00000000  00000000  00021fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  0000a468  00000000  00000000  000222d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   00009cb5  00000000  00000000  0002c738  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0001d664  00000000  00000000  000363ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      00000070  00000000  00000000  00053a51  2**0
                  CONTENTS, READONLY
 26 .ARM.attributes 00000039  00000000  00000000  00053ac1  2**0
                  CONTENTS, READONLY
 27 .debug_frame  000011c0  00000000  00000000  00053afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_loc    00004ed2  00000000  00000000  00054cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000090 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0026cc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000d4 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a000784 l     F .text	000000ac uartProcessIRQ
10000098 l     O .bss	00000004 rxIsrCallbackUART0
1000009c l     O .bss	00000004 txIsrCallbackUART0
100000a0 l     O .bss	00000004 txIsrCallbackUART2
100000a4 l     O .bss	00000004 txIsrCallbackUART3
1a002518 l     O .text	00000048 lpcUarts
100000a8 l     O .bss	00000004 rxIsrCallbackUART2
100000ac l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 ejercicio_2.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000004 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a000390 l     F .text	00000010 clearInterrupt
1a0003a0 l     F .text	00000060 serveInterrupt
10000008 l     O .data	00000048 ultrasonicSensors
1a0023dc l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a000424 l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0009a4 l     F .text	00000002 errorOcurred
1a0009a8 l     F .text	00000002 doNothing
10000050 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00257c l     O .text	00000060 pinmuxing
1a0025dc l     O .text	0000000c InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000c6c l     F .text	0000002c Chip_UART_GetIndex
1a000c98 l     F .text	00000048 Chip_UART_ABIntHandler
1a0025e8 l     O .text	00000008 UART_PClock
1a0025f0 l     O .text	00000008 UART_BClock
100000b0 l     O .bss	00000001 ABsyncSts
00000000 l    df *ABS*	00000000 ring_buffer.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
1a0011cc l     F .text	00000034 Chip_USB_PllSetup
1a0025f8 l     O .text	00000014 usbPLLSetup
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001290 l     F .text	000000a8 pll_calc_divs
1a001338 l     F .text	00000104 pll_get_frac
1a00143c l     F .text	00000024 Chip_Clock_TestMainPLLMultiplier
1a001460 l     F .text	00000048 Chip_Clock_FindBaseClock
1a001888 l     F .text	00000022 Chip_Clock_GetDivRate
1a00260c l     O .text	0000006c periph_to_base
100000b4 l     O .bss	00000008 audio_usb_pll_freq
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002684 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 board.c
1a002560 l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a0026d4 l       .ARM.exidx	00000000 __exidx_end
1a0026d4 l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a0026cc l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
00000000 l       *UND*	00000000 _printf_float
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
100000d4 l       .bss	00000000 _pvHeapStart
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a001558 g     F .text	0000001c Chip_Clock_GetDividerSource
1a001e34 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a000a28 g     F .text	00000040 TIMER2_IRQHandler
1a000860 g     F .text	00000014 uartRxRead
1a00019c  w    F .text	00000002 DebugMon_Handler
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a001e68 g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
1a000904 g     F .text	0000001c uartReadByte
1a001200 g     F .text	00000034 Chip_USB0_Init
1a000d70 g     F .text	00000010 Chip_UART_CheckBusy
10000094 g     O .bss	00000004 callBackFuncParams
1a000188  w    F .text	00000002 HardFault_Handler
1a001004 g     F .text	0000000c Chip_UART_GetABEOStatus
1a000000 g       *ABS*	00000000 __vectors_start__
1a001118 g     F .text	00000030 RingBuffer_Pop
1a00193c g     F .text	00000018 Chip_Clock_DisableBaseClock
1a000754 g     F .text	00000030 SysTick_Handler
1a000dec g     F .text	00000044 Chip_UART_SetBaud
1a0016c8 g     F .text	0000009c Chip_Clock_SetupMainPLLMult
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
1a0001a0  w    F .text	00000002 PendSV_Handler
1a000184  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
1a001b44 g     F .text	00000014 Chip_Clock_EnablePLL
53ff5ae6 g       *ABS*	00000000 __valid_user_code_checksum
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a000a68 g     F .text	00000040 TIMER3_IRQHandler
1a001998 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a000ed4 g     F .text	0000000e Chip_UART_ReadRB
1a002370 g     F .text	00000016 memcpy
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
1a001b04 g     F .text	00000040 Chip_Clock_SetupPLL
1a001dd4 g     F .text	00000000 .hidden __aeabi_uldivmod
100000d4 g       .noinit	00000000 _noinit
1a00093c g     F .text	00000018 uartWriteString
100000d0 g     O .bss	00000004 SystemCoreClock
1a000ce0 g     F .text	00000050 Chip_UART_Init
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a001088 g     F .text	00000090 RingBuffer_InsertMult
1a000194  w    F .text	00000002 UsageFault_Handler
1a001a88 g     F .text	0000004c Chip_Clock_GetRate
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
100000c0 g     O .bss	00000008 tickCounter
1a000bec g     F .text	00000074 Board_SetupClocking
1a001cf0 g     F .text	00000008 Chip_SystemInit
1a002578 g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001d54 g     F .text	00000002 Chip_GPIO_DeInit
1a00040c g     F .text	0000000a GPIO1_IRQHandler
1a001234 g     F .text	00000048 Chip_USB1_Init
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a000830 g     F .text	00000018 uartRxReady
1a0002fc g     O .text	00000004 CRP_WORD
1a001cdc g     F .text	00000014 Chip_SetupIrcClocking
1a002104 g     F .text	0000026a .hidden __udivdi3
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a001058 g     F .text	00000030 RingBuffer_Insert
1a000114 g       .text	00000000 __data_section_table
1a0001a8  w    F .text	00000002 RTC_IRQHandler
100000d4 g       .bss	00000000 _ebss
1a0009ac g     F .text	0000003c TIMER0_IRQHandler
1a0006d8 g     F .text	0000007c tickInit
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a0014a8 g     F .text	0000004c Chip_Clock_EnableCrystal
1a0001ac g     F .text	0000001a data_init
1a0009e8 g     F .text	00000040 TIMER1_IRQHandler
1a001504 g     F .text	00000054 Chip_Clock_SetDivider
1a000954 g     F .text	0000000a UART2_IRQHandler
1a001820 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a000d30 g     F .text	0000001c Chip_UART_DeInit
1a0023e0 g     O .text	00000136 gpioPinsInit
1a000920 g     F .text	0000001a uartWriteByte
1a00069c g     F .text	00000016 gpioToggle
1a000418 g     F .text	0000000a GPIO2_IRQHandler
1a0014f4 g     F .text	00000010 Chip_Clock_DisableCrystal
1a001a60 g     F .text	00000014 Chip_Clock_StartPowerDown
1a001974 g     F .text	00000024 Chip_Clock_GetBaseClock
1a001b6c g     F .text	0000000c Chip_Clock_GetPLLStatus
1a000e30 g     F .text	00000024 Chip_UART_RXIntHandlerRB
1a000e90 g     F .text	00000042 Chip_UART_SendRB
10000090 g       .bss	00000000 _bss
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a001764 g     F .text	000000bc Chip_Clock_SetupMainPLLHz
1a001d50 g     F .text	00000002 Chip_GPIO_Init
1a002574 g     O .text	00000004 OscRateIn
1a000888 g     F .text	0000007c uartInit
100000d4 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a001954 g     F .text	00000020 Chip_Clock_IsBaseClockEnabled
1a000178 g       .text	00000000 __bss_section_table_end
1a000450 g     F .text	0000019c gpioInit
1a0018f0 g     F .text	00000034 Chip_Clock_GetBaseClockOpts
1a001e64  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001148 g     F .text	00000082 RingBuffer_PopMult
1a0001a8  w    F .text	00000002 USB0_IRQHandler
1a001a2c g     F .text	00000034 Chip_Clock_Disable
1a0001a8  w    F .text	00000002 GPIO3_IRQHandler
1a000d4c g     F .text	00000022 Chip_UART_Send
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a001ad4 g     F .text	00000030 Chip_Clock_GetEMCRate
1a000ee4 g     F .text	00000036 Chip_UART_IRQRBHandler
1a001574 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002386 g     F .text	00000010 memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	00000074 main
1a000da4 g     F .text	00000022 Chip_UART_Read
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a000198  w    F .text	00000002 SVC_Handler
10000000 g     O .data	00000004 DWT_CTRL
1a001cc8 g     F .text	00000014 Chip_SetupXtalClocking
1a000848 g     F .text	00000018 uartTxReady
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a0019a4 g     F .text	0000003c Chip_Clock_EnableOpts
1a001590 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001cf8 g     F .text	00000058 fpuInit
1a001648 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000b9c g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a00096c g     F .text	00000038 delay
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001a14 g     F .text	00000018 Chip_Clock_RTCEnable
1a0005ec g     F .text	00000058 gpioWrite
1a000d80 g     F .text	00000024 Chip_UART_SendBlocking
1a000bb8 g     F .text	00000034 Board_SetupMuxing
1a000f1c g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0006b4 g     F .text	0000000c tickRead
100000c8 g     O .bss	00000008 tickRateMS
1a0001a8  w    F .text	00000002 ETH_IRQHandler
10000090 g     O .bss	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000874 g     F .text	00000014 uartTxWrite
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a000178 g       .text	00000000 __section_table_end
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a0001a8  w    F .text	00000002 DAC_IRQHandler
10000090 g       .data	00000000 _edata
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a001010 g     F .text	00000038 Chip_UART_ABCmd
1a001b78 g     F .text	00000150 Chip_SetupCoreClock
1a000400 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a001d58 g     F .text	0000007c ResetISR
1a00127c g     F .text	00000014 SystemCoreClockUpdate
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1a001048 g     F .text	00000010 RingBuffer_Init
1a001e64  w    F .text	00000002 .hidden __aeabi_idiv0
1a001b58 g     F .text	00000014 Chip_Clock_DisablePLL
1a001a74 g     F .text	00000014 Chip_Clock_ClearPowerDown
1a000e54 g     F .text	0000003a Chip_UART_TXIntHandlerRB
1a000190  w    F .text	00000002 BusFault_Handler
1a0019e0 g     F .text	00000034 Chip_Clock_Enable
1a000960 g     F .text	0000000a UART3_IRQHandler
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
1a001e04 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a000644 g     F .text	00000058 gpioRead
1a000aa8 g     F .text	000000f4 boardInit
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a0006c0 g     F .text	00000018 tickPowerSet
1a000dc8 g     F .text	00000024 Chip_UART_ReadBlocking
1a001924 g     F .text	00000018 Chip_Clock_EnableBaseClock
1a0018ac g     F .text	00000044 Chip_Clock_SetBaseClock
1a000374 g     F .text	0000001c cyclesCounterInit
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
1a000c60 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 59 1d 00 1a 85 01 00 1a 89 01 00 1a     ....Y...........
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a e6 5a ff 53     .............Z.S
	...
1a00002c:	99 01 00 1a 9d 01 00 1a 00 00 00 00 a1 01 00 1a     ................
1a00003c:	55 07 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     U...............
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00006c:	a9 01 00 1a ad 09 00 1a e9 09 00 1a 29 0a 00 1a     ............)...
1a00007c:	69 0a 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     i...............
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a 55 09 00 1a     ....y.......U...
1a0000ac:	61 09 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     a...............
1a0000bc:	a9 01 00 1a 01 04 00 1a 0d 04 00 1a 19 04 00 1a     ................
1a0000cc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a0026d4 	.word	0x1a0026d4
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000090 	.word	0x00000090
1a000120:	1a0026d4 	.word	0x1a0026d4
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0026d4 	.word	0x1a0026d4
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0026d4 	.word	0x1a0026d4
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0026d4 	.word	0x1a0026d4
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000090 	.word	0x10000090
1a000154:	00000044 	.word	0x00000044
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f000 fb02 	bl	1a000784 <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop

1a000198 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <SVC_Handler>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop

1a0001a0 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <PendSV_Handler>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <PendSV_Handler+0x4>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:

/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

int main(void){
1a000300:	b500      	push	{lr}
1a000302:	b083      	sub	sp, #12
uint8_t dataBluetooth;

	// Inicializar la placa
	boardConfig();
1a000304:	f000 fbd0 	bl	1a000aa8 <boardInit>
	// Configura la UART 232 a 9600 Baudios.
	uartConfig(UART_232, 115200);
1a000308:	2005      	movs	r0, #5
1a00030a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00030e:	f000 fabb 	bl	1a000888 <uartInit>
	// Escribe un mensaje de bienvenida
	uartWriteString(UART_232, "Hola mundo desde EDU CIAA NXP!\n\r");
1a000312:	2005      	movs	r0, #5
1a000314:	4915      	ldr	r1, [pc, #84]	; (1a00036c <main+0x6c>)
1a000316:	f000 fb11 	bl	1a00093c <uartWriteString>

	while(1) {
		// Se queda esperando que llegue informacion por bluetooth
		if (uartReadByte(UART_232, &dataBluetooth)){
1a00031a:	2005      	movs	r0, #5
1a00031c:	f10d 0107 	add.w	r1, sp, #7
1a000320:	f000 faf0 	bl	1a000904 <uartReadByte>
1a000324:	2800      	cmp	r0, #0
1a000326:	d0f8      	beq.n	1a00031a <main+0x1a>
			if(dataBluetooth=='h')
1a000328:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00032c:	2b68      	cmp	r3, #104	; 0x68
1a00032e:	d103      	bne.n	1a000338 <main+0x38>
				gpioWrite(LEDB,1);
1a000330:	202a      	movs	r0, #42	; 0x2a
1a000332:	2101      	movs	r1, #1
1a000334:	f000 f95a 	bl	1a0005ec <gpioWrite>
			if(dataBluetooth=='l')
1a000338:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00033c:	2b6c      	cmp	r3, #108	; 0x6c
1a00033e:	d103      	bne.n	1a000348 <main+0x48>
				gpioWrite(LEDB,0);
1a000340:	202a      	movs	r0, #42	; 0x2a
1a000342:	2100      	movs	r1, #0
1a000344:	f000 f952 	bl	1a0005ec <gpioWrite>
			uartWriteString(UART_232, "Lo recibido por Bluetooth es: ");
1a000348:	2005      	movs	r0, #5
1a00034a:	4909      	ldr	r1, [pc, #36]	; (1a000370 <main+0x70>)
1a00034c:	f000 faf6 	bl	1a00093c <uartWriteString>
			uartWriteByte  (UART_232, dataBluetooth);
1a000350:	2005      	movs	r0, #5
1a000352:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000356:	f000 fae3 	bl	1a000920 <uartWriteByte>
			gpioToggle(LEDR);
1a00035a:	2028      	movs	r0, #40	; 0x28
1a00035c:	f000 f99e 	bl	1a00069c <gpioToggle>
			delay (1000);
1a000360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000364:	2100      	movs	r1, #0
1a000366:	f000 fb01 	bl	1a00096c <delay>
1a00036a:	e7d6      	b.n	1a00031a <main+0x1a>
1a00036c:	1a002398 	.word	0x1a002398
1a000370:	1a0023bc 	.word	0x1a0023bc

1a000374 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a000374:	4b04      	ldr	r3, [pc, #16]	; (1a000388 <cyclesCounterInit+0x14>)
1a000376:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a000378:	4b04      	ldr	r3, [pc, #16]	; (1a00038c <cyclesCounterInit+0x18>)
1a00037a:	681a      	ldr	r2, [r3, #0]
1a00037c:	6813      	ldr	r3, [r2, #0]
1a00037e:	f043 0301 	orr.w	r3, r3, #1
1a000382:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a000384:	2001      	movs	r0, #1
1a000386:	4770      	bx	lr
1a000388:	10000004 	.word	0x10000004
1a00038c:	10000000 	.word	0x10000000

1a000390 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a000390:	2301      	movs	r3, #1
1a000392:	4083      	lsls	r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000394:	4a01      	ldr	r2, [pc, #4]	; (1a00039c <clearInterrupt+0xc>)
1a000396:	6253      	str	r3, [r2, #36]	; 0x24
1a000398:	4770      	bx	lr
1a00039a:	bf00      	nop
1a00039c:	40087000 	.word	0x40087000

1a0003a0 <serveInterrupt>:
}

static void serveInterrupt(uint8_t irqChannel)
{
1a0003a0:	b570      	push	{r4, r5, r6, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a0003a2:	4b13      	ldr	r3, [pc, #76]	; (1a0003f0 <serveInterrupt+0x50>)
1a0003a4:	5c1b      	ldrb	r3, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a0003a6:	4a13      	ldr	r2, [pc, #76]	; (1a0003f4 <serveInterrupt+0x54>)
1a0003a8:	69d2      	ldr	r2, [r2, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a0003aa:	2401      	movs	r4, #1
1a0003ac:	4084      	lsls	r4, r0
1a0003ae:	4214      	tst	r4, r2
1a0003b0:	d00a      	beq.n	1a0003c8 <serveInterrupt+0x28>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a0003b2:	4a11      	ldr	r2, [pc, #68]	; (1a0003f8 <serveInterrupt+0x58>)
1a0003b4:	6892      	ldr	r2, [r2, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0003b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a0003ba:	00db      	lsls	r3, r3, #3
1a0003bc:	490f      	ldr	r1, [pc, #60]	; (1a0003fc <serveInterrupt+0x5c>)
1a0003be:	440b      	add	r3, r1
1a0003c0:	605a      	str	r2, [r3, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a0003c2:	4b0c      	ldr	r3, [pc, #48]	; (1a0003f4 <serveInterrupt+0x54>)
1a0003c4:	61dc      	str	r4, [r3, #28]
1a0003c6:	e00f      	b.n	1a0003e8 <serveInterrupt+0x48>
1a0003c8:	4a0b      	ldr	r2, [pc, #44]	; (1a0003f8 <serveInterrupt+0x58>)
1a0003ca:	6891      	ldr	r1, [r2, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0003cc:	4d0b      	ldr	r5, [pc, #44]	; (1a0003fc <serveInterrupt+0x5c>)
1a0003ce:	005e      	lsls	r6, r3, #1
1a0003d0:	18f2      	adds	r2, r6, r3
1a0003d2:	00d2      	lsls	r2, r2, #3
1a0003d4:	442a      	add	r2, r5
1a0003d6:	6091      	str	r1, [r2, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0003d8:	6852      	ldr	r2, [r2, #4]
1a0003da:	1a89      	subs	r1, r1, r2
1a0003dc:	4433      	add	r3, r6
1a0003de:	00db      	lsls	r3, r3, #3
1a0003e0:	442b      	add	r3, r5
1a0003e2:	60d9      	str	r1, [r3, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a0003e4:	4b03      	ldr	r3, [pc, #12]	; (1a0003f4 <serveInterrupt+0x54>)
1a0003e6:	621c      	str	r4, [r3, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0003e8:	f7ff ffd2 	bl	1a000390 <clearInterrupt>
1a0003ec:	bd70      	pop	{r4, r5, r6, pc}
1a0003ee:	bf00      	nop
1a0003f0:	1a0023dc 	.word	0x1a0023dc
1a0003f4:	40087000 	.word	0x40087000
1a0003f8:	40084000 	.word	0x40084000
1a0003fc:	10000008 	.word	0x10000008

1a000400 <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a000400:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a000402:	2000      	movs	r0, #0
1a000404:	f7ff ffcc 	bl	1a0003a0 <serveInterrupt>
1a000408:	bd08      	pop	{r3, pc}
1a00040a:	bf00      	nop

1a00040c <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler(void)
{
1a00040c:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a00040e:	2001      	movs	r0, #1
1a000410:	f7ff ffc6 	bl	1a0003a0 <serveInterrupt>
1a000414:	bd08      	pop	{r3, pc}
1a000416:	bf00      	nop

1a000418 <GPIO2_IRQHandler>:
}

void GPIO2_IRQHandler(void)
{
1a000418:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a00041a:	2002      	movs	r0, #2
1a00041c:	f7ff ffc0 	bl	1a0003a0 <serveInterrupt>
1a000420:	bd08      	pop	{r3, pc}
1a000422:	bf00      	nop

1a000424 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a000424:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a000426:	4d09      	ldr	r5, [pc, #36]	; (1a00044c <gpioObtainPinInit+0x28>)
1a000428:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00042c:	182c      	adds	r4, r5, r0
1a00042e:	5c28      	ldrb	r0, [r5, r0]
1a000430:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a000432:	7861      	ldrb	r1, [r4, #1]
1a000434:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a000436:	78a2      	ldrb	r2, [r4, #2]
1a000438:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00043a:	78e2      	ldrb	r2, [r4, #3]
1a00043c:	9b02      	ldr	r3, [sp, #8]
1a00043e:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a000440:	7922      	ldrb	r2, [r4, #4]
1a000442:	9b03      	ldr	r3, [sp, #12]
1a000444:	701a      	strb	r2, [r3, #0]
}
1a000446:	bc30      	pop	{r4, r5}
1a000448:	4770      	bx	lr
1a00044a:	bf00      	nop
1a00044c:	1a0023e0 	.word	0x1a0023e0

1a000450 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a000450:	b570      	push	{r4, r5, r6, lr}
1a000452:	b084      	sub	sp, #16
1a000454:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a000456:	2300      	movs	r3, #0
1a000458:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00045c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000460:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000464:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000468:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00046c:	ab03      	add	r3, sp, #12
1a00046e:	9300      	str	r3, [sp, #0]
1a000470:	f10d 030b 	add.w	r3, sp, #11
1a000474:	9301      	str	r3, [sp, #4]
1a000476:	f10d 010f 	add.w	r1, sp, #15
1a00047a:	f10d 020e 	add.w	r2, sp, #14
1a00047e:	f10d 030d 	add.w	r3, sp, #13
1a000482:	f7ff ffcf 	bl	1a000424 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a000486:	2c05      	cmp	r4, #5
1a000488:	f200 80a8 	bhi.w	1a0005dc <gpioInit+0x18c>
1a00048c:	e8df f004 	tbb	[pc, r4]
1a000490:	46278408 	.word	0x46278408
1a000494:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a000496:	4853      	ldr	r0, [pc, #332]	; (1a0005e4 <gpioInit+0x194>)
1a000498:	f001 fc5a 	bl	1a001d50 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a00049c:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a00049e:	e09e      	b.n	1a0005de <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a0004a0:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0004a4:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0004a8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0004ac:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0004b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0004b4:	494c      	ldr	r1, [pc, #304]	; (1a0005e8 <gpioInit+0x198>)
1a0004b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0004ba:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0004be:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0004c2:	2001      	movs	r0, #1
1a0004c4:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0004c8:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0004cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0004d0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0004d4:	ea22 0204 	bic.w	r2, r2, r4
1a0004d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0004dc:	e07f      	b.n	1a0005de <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a0004de:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0004e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0004e6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0004ea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0004ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0004f2:	493d      	ldr	r1, [pc, #244]	; (1a0005e8 <gpioInit+0x198>)
1a0004f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0004f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0004fc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000500:	2001      	movs	r0, #1
1a000502:	fa00 f402 	lsl.w	r4, r0, r2
1a000506:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a00050a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00050e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000512:	ea22 0204 	bic.w	r2, r2, r4
1a000516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a00051a:	e060      	b.n	1a0005de <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a00051c:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000520:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000524:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000528:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00052c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000530:	492d      	ldr	r1, [pc, #180]	; (1a0005e8 <gpioInit+0x198>)
1a000532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000536:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00053a:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00053e:	2001      	movs	r0, #1
1a000540:	fa00 f402 	lsl.w	r4, r0, r2
1a000544:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00054c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000550:	ea22 0204 	bic.w	r2, r2, r4
1a000554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000558:	e041      	b.n	1a0005de <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a00055a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00055e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000562:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000566:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00056a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00056e:	491e      	ldr	r1, [pc, #120]	; (1a0005e8 <gpioInit+0x198>)
1a000570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000574:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000578:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00057c:	2001      	movs	r0, #1
1a00057e:	fa00 f402 	lsl.w	r4, r0, r2
1a000582:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00058a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a00058e:	ea22 0204 	bic.w	r2, r2, r4
1a000592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000596:	e022      	b.n	1a0005de <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a000598:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00059c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0005a0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0005a4:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0005a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0005ac:	490e      	ldr	r1, [pc, #56]	; (1a0005e8 <gpioInit+0x198>)
1a0005ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0005b2:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0005b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a0005ba:	b25a      	sxtb	r2, r3
1a0005bc:	2001      	movs	r0, #1
1a0005be:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a0005c2:	4a08      	ldr	r2, [pc, #32]	; (1a0005e4 <gpioInit+0x194>)
1a0005c4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0005c8:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a0005cc:	4331      	orrs	r1, r6
1a0005ce:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0005d2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0005d6:	2100      	movs	r1, #0
1a0005d8:	54d1      	strb	r1, [r2, r3]
1a0005da:	e000      	b.n	1a0005de <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a0005dc:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a0005de:	b004      	add	sp, #16
1a0005e0:	bd70      	pop	{r4, r5, r6, pc}
1a0005e2:	bf00      	nop
1a0005e4:	400f4000 	.word	0x400f4000
1a0005e8:	40086000 	.word	0x40086000

1a0005ec <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0005ec:	b510      	push	{r4, lr}
1a0005ee:	b084      	sub	sp, #16
1a0005f0:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0005f2:	2300      	movs	r3, #0
1a0005f4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0005f8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0005fc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000600:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000604:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a000608:	ab03      	add	r3, sp, #12
1a00060a:	9300      	str	r3, [sp, #0]
1a00060c:	f10d 030b 	add.w	r3, sp, #11
1a000610:	9301      	str	r3, [sp, #4]
1a000612:	f10d 010f 	add.w	r1, sp, #15
1a000616:	f10d 020e 	add.w	r2, sp, #14
1a00061a:	f10d 030d 	add.w	r3, sp, #13
1a00061e:	f7ff ff01 	bl	1a000424 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a000622:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a000626:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a00062a:	3400      	adds	r4, #0
1a00062c:	bf18      	it	ne
1a00062e:	2401      	movne	r4, #1
1a000630:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a000634:	4a02      	ldr	r2, [pc, #8]	; (1a000640 <gpioWrite+0x54>)
1a000636:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a000638:	2001      	movs	r0, #1
1a00063a:	b004      	add	sp, #16
1a00063c:	bd10      	pop	{r4, pc}
1a00063e:	bf00      	nop
1a000640:	400f4000 	.word	0x400f4000

1a000644 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a000644:	b500      	push	{lr}
1a000646:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a000648:	2300      	movs	r3, #0
1a00064a:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00064e:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000652:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000656:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00065a:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00065e:	ab03      	add	r3, sp, #12
1a000660:	9300      	str	r3, [sp, #0]
1a000662:	f10d 030b 	add.w	r3, sp, #11
1a000666:	9301      	str	r3, [sp, #4]
1a000668:	f10d 010f 	add.w	r1, sp, #15
1a00066c:	f10d 020e 	add.w	r2, sp, #14
1a000670:	f10d 030d 	add.w	r3, sp, #13
1a000674:	f7ff fed6 	bl	1a000424 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a000678:	f99d 200c 	ldrsb.w	r2, [sp, #12]
1a00067c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a000680:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a000684:	4a04      	ldr	r2, [pc, #16]	; (1a000698 <gpioRead+0x54>)
1a000686:	5cd3      	ldrb	r3, [r2, r3]
1a000688:	f013 0fff 	tst.w	r3, #255	; 0xff

   return ret_val;
}
1a00068c:	bf14      	ite	ne
1a00068e:	2001      	movne	r0, #1
1a000690:	2000      	moveq	r0, #0
1a000692:	b005      	add	sp, #20
1a000694:	f85d fb04 	ldr.w	pc, [sp], #4
1a000698:	400f4000 	.word	0x400f4000

1a00069c <gpioToggle>:
   return ret_val;
}


bool_t gpioToggle( gpioMap_t pin )
{
1a00069c:	b510      	push	{r4, lr}
1a00069e:	4604      	mov	r4, r0

   return gpioWrite( pin, !gpioRead(pin) );
1a0006a0:	f7ff ffd0 	bl	1a000644 <gpioRead>
1a0006a4:	fab0 f180 	clz	r1, r0
1a0006a8:	0949      	lsrs	r1, r1, #5
1a0006aa:	4620      	mov	r0, r4
1a0006ac:	f7ff ff9e 	bl	1a0005ec <gpioWrite>
}
1a0006b0:	bd10      	pop	{r4, pc}
1a0006b2:	bf00      	nop

1a0006b4 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a0006b4:	4b01      	ldr	r3, [pc, #4]	; (1a0006bc <tickRead+0x8>)
1a0006b6:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0006ba:	4770      	bx	lr
1a0006bc:	100000c0 	.word	0x100000c0

1a0006c0 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a0006c0:	b118      	cbz	r0, 1a0006ca <tickPowerSet+0xa>
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0006c2:	2207      	movs	r2, #7
1a0006c4:	4b03      	ldr	r3, [pc, #12]	; (1a0006d4 <tickPowerSet+0x14>)
1a0006c6:	601a      	str	r2, [r3, #0]
1a0006c8:	4770      	bx	lr
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a0006ca:	2200      	movs	r2, #0
1a0006cc:	4b01      	ldr	r3, [pc, #4]	; (1a0006d4 <tickPowerSet+0x14>)
1a0006ce:	601a      	str	r2, [r3, #0]
1a0006d0:	4770      	bx	lr
1a0006d2:	bf00      	nop
1a0006d4:	e000e010 	.word	0xe000e010

1a0006d8 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a0006d8:	b510      	push	{r4, lr}
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
      tick_t tickRateHz = 0;
      if( tickRateMSvalue == 0 ) {
1a0006da:	ea50 0301 	orrs.w	r3, r0, r1
1a0006de:	d104      	bne.n	1a0006ea <tickInit+0x12>
         tickPowerSet( OFF );
1a0006e0:	2000      	movs	r0, #0
1a0006e2:	f7ff ffed 	bl	1a0006c0 <tickPowerSet>
         ret_val = 0;
1a0006e6:	2000      	movs	r0, #0
1a0006e8:	bd10      	pop	{r4, pc}
      } else {
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0006ea:	f110 32ff 	adds.w	r2, r0, #4294967295
1a0006ee:	f141 33ff 	adc.w	r3, r1, #4294967295
1a0006f2:	2b00      	cmp	r3, #0
1a0006f4:	bf08      	it	eq
1a0006f6:	2a32      	cmpeq	r2, #50	; 0x32
1a0006f8:	d222      	bcs.n	1a000740 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0006fa:	4b12      	ldr	r3, [pc, #72]	; (1a000744 <tickInit+0x6c>)
1a0006fc:	e9c3 0100 	strd	r0, r1, [r3]
            tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
            tickRateHz =  100 =>  100 ticks per second => 10 ms tick
            tickRateHz =   20 =>   20 ticks per second => 50 ms tick
            */
            // Init SysTick interrupt, tickRateHz ticks per second
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a000700:	4b11      	ldr	r3, [pc, #68]	; (1a000748 <tickInit+0x70>)
1a000702:	681c      	ldr	r4, [r3, #0]
1a000704:	fba4 2300 	umull	r2, r3, r4, r0
1a000708:	fb04 3301 	mla	r3, r4, r1, r3
1a00070c:	4610      	mov	r0, r2
1a00070e:	4619      	mov	r1, r3
1a000710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000714:	2300      	movs	r3, #0
1a000716:	f001 fb5d 	bl	1a001dd4 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a00071a:	3801      	subs	r0, #1
1a00071c:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a000720:	d209      	bcs.n	1a000736 <tickInit+0x5e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a000722:	4b0a      	ldr	r3, [pc, #40]	; (1a00074c <tickInit+0x74>)
1a000724:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a000726:	21e0      	movs	r1, #224	; 0xe0
1a000728:	4a09      	ldr	r2, [pc, #36]	; (1a000750 <tickInit+0x78>)
1a00072a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a00072e:	2200      	movs	r2, #0
1a000730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000732:	2207      	movs	r2, #7
1a000734:	601a      	str	r2, [r3, #0]
            if ( SysTick_Config( CMU_ClockFreqGet(cmuClock_CORE) / tickRateHz) ){
               //DEBUG_BREAK;
               ret_val = 0;
            }
            */
            tickPowerSet( ON );
1a000736:	2001      	movs	r0, #1
1a000738:	f7ff ffc2 	bl	1a0006c0 <tickPowerSet>

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
1a00073c:	2001      	movs	r0, #1
1a00073e:	bd10      	pop	{r4, pc}
            }
            */
            tickPowerSet( ON );
         } else {
            // Error, tickRateMS variable not in range (1 <= tickRateMS <= 50)
            ret_val = 0;
1a000740:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a000742:	bd10      	pop	{r4, pc}
1a000744:	100000c8 	.word	0x100000c8
1a000748:	100000d0 	.word	0x100000d0
1a00074c:	e000e010 	.word	0xe000e010
1a000750:	e000ed00 	.word	0xe000ed00

1a000754 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a000754:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a000756:	4908      	ldr	r1, [pc, #32]	; (1a000778 <SysTick_Handler+0x24>)
1a000758:	e9d1 2300 	ldrd	r2, r3, [r1]
1a00075c:	3201      	adds	r2, #1
1a00075e:	f143 0300 	adc.w	r3, r3, #0
1a000762:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a000766:	4b05      	ldr	r3, [pc, #20]	; (1a00077c <SysTick_Handler+0x28>)
1a000768:	681b      	ldr	r3, [r3, #0]
1a00076a:	b123      	cbz	r3, 1a000776 <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a00076c:	4b03      	ldr	r3, [pc, #12]	; (1a00077c <SysTick_Handler+0x28>)
1a00076e:	681b      	ldr	r3, [r3, #0]
1a000770:	4a03      	ldr	r2, [pc, #12]	; (1a000780 <SysTick_Handler+0x2c>)
1a000772:	6810      	ldr	r0, [r2, #0]
1a000774:	4798      	blx	r3
1a000776:	bd08      	pop	{r3, pc}
1a000778:	100000c0 	.word	0x100000c0
1a00077c:	10000090 	.word	0x10000090
1a000780:	10000094 	.word	0x10000094

1a000784 <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a000784:	b570      	push	{r4, r5, r6, lr}
1a000786:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a000788:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a00078c:	009b      	lsls	r3, r3, #2
1a00078e:	4a21      	ldr	r2, [pc, #132]	; (1a000814 <uartProcessIRQ+0x90>)
1a000790:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000792:	6975      	ldr	r5, [r6, #20]
1a000794:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a000796:	f015 0f01 	tst.w	r5, #1
1a00079a:	d019      	beq.n	1a0007d0 <uartProcessIRQ+0x4c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a00079c:	b930      	cbnz	r0, 1a0007ac <uartProcessIRQ+0x28>
1a00079e:	4b1e      	ldr	r3, [pc, #120]	; (1a000818 <uartProcessIRQ+0x94>)
1a0007a0:	681b      	ldr	r3, [r3, #0]
1a0007a2:	b11b      	cbz	r3, 1a0007ac <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a0007a4:	4b1c      	ldr	r3, [pc, #112]	; (1a000818 <uartProcessIRQ+0x94>)
1a0007a6:	681b      	ldr	r3, [r3, #0]
1a0007a8:	2000      	movs	r0, #0
1a0007aa:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0007ac:	2c03      	cmp	r4, #3
1a0007ae:	d106      	bne.n	1a0007be <uartProcessIRQ+0x3a>
1a0007b0:	4b1a      	ldr	r3, [pc, #104]	; (1a00081c <uartProcessIRQ+0x98>)
1a0007b2:	681b      	ldr	r3, [r3, #0]
1a0007b4:	b11b      	cbz	r3, 1a0007be <uartProcessIRQ+0x3a>
         (*rxIsrCallbackUART2)(0);
1a0007b6:	4b19      	ldr	r3, [pc, #100]	; (1a00081c <uartProcessIRQ+0x98>)
1a0007b8:	681b      	ldr	r3, [r3, #0]
1a0007ba:	2000      	movs	r0, #0
1a0007bc:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0007be:	2c05      	cmp	r4, #5
1a0007c0:	d106      	bne.n	1a0007d0 <uartProcessIRQ+0x4c>
1a0007c2:	4b17      	ldr	r3, [pc, #92]	; (1a000820 <uartProcessIRQ+0x9c>)
1a0007c4:	681b      	ldr	r3, [r3, #0]
1a0007c6:	b11b      	cbz	r3, 1a0007d0 <uartProcessIRQ+0x4c>
         (*rxIsrCallbackUART3)(0);
1a0007c8:	4b15      	ldr	r3, [pc, #84]	; (1a000820 <uartProcessIRQ+0x9c>)
1a0007ca:	681b      	ldr	r3, [r3, #0]
1a0007cc:	2000      	movs	r0, #0
1a0007ce:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0007d0:	f015 0f20 	tst.w	r5, #32
1a0007d4:	d01d      	beq.n	1a000812 <uartProcessIRQ+0x8e>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a0007d6:	6873      	ldr	r3, [r6, #4]
1a0007d8:	f013 0f02 	tst.w	r3, #2
1a0007dc:	d019      	beq.n	1a000812 <uartProcessIRQ+0x8e>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0007de:	b934      	cbnz	r4, 1a0007ee <uartProcessIRQ+0x6a>
1a0007e0:	4b10      	ldr	r3, [pc, #64]	; (1a000824 <uartProcessIRQ+0xa0>)
1a0007e2:	681b      	ldr	r3, [r3, #0]
1a0007e4:	b11b      	cbz	r3, 1a0007ee <uartProcessIRQ+0x6a>
         (*txIsrCallbackUART0)(0);
1a0007e6:	4b0f      	ldr	r3, [pc, #60]	; (1a000824 <uartProcessIRQ+0xa0>)
1a0007e8:	681b      	ldr	r3, [r3, #0]
1a0007ea:	2000      	movs	r0, #0
1a0007ec:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0007ee:	2c03      	cmp	r4, #3
1a0007f0:	d106      	bne.n	1a000800 <uartProcessIRQ+0x7c>
1a0007f2:	4b0d      	ldr	r3, [pc, #52]	; (1a000828 <uartProcessIRQ+0xa4>)
1a0007f4:	681b      	ldr	r3, [r3, #0]
1a0007f6:	b11b      	cbz	r3, 1a000800 <uartProcessIRQ+0x7c>
         (*txIsrCallbackUART2)(0);
1a0007f8:	4b0b      	ldr	r3, [pc, #44]	; (1a000828 <uartProcessIRQ+0xa4>)
1a0007fa:	681b      	ldr	r3, [r3, #0]
1a0007fc:	2000      	movs	r0, #0
1a0007fe:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a000800:	2c05      	cmp	r4, #5
1a000802:	d106      	bne.n	1a000812 <uartProcessIRQ+0x8e>
1a000804:	4b09      	ldr	r3, [pc, #36]	; (1a00082c <uartProcessIRQ+0xa8>)
1a000806:	681b      	ldr	r3, [r3, #0]
1a000808:	b11b      	cbz	r3, 1a000812 <uartProcessIRQ+0x8e>
         (*txIsrCallbackUART3)(0);
1a00080a:	4b08      	ldr	r3, [pc, #32]	; (1a00082c <uartProcessIRQ+0xa8>)
1a00080c:	681b      	ldr	r3, [r3, #0]
1a00080e:	2000      	movs	r0, #0
1a000810:	4798      	blx	r3
1a000812:	bd70      	pop	{r4, r5, r6, pc}
1a000814:	1a002518 	.word	0x1a002518
1a000818:	10000098 	.word	0x10000098
1a00081c:	100000a8 	.word	0x100000a8
1a000820:	100000ac 	.word	0x100000ac
1a000824:	1000009c 	.word	0x1000009c
1a000828:	100000a0 	.word	0x100000a0
1a00082c:	100000a4 	.word	0x100000a4

1a000830 <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a000830:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000834:	0080      	lsls	r0, r0, #2
1a000836:	4b03      	ldr	r3, [pc, #12]	; (1a000844 <uartRxReady+0x14>)
1a000838:	581b      	ldr	r3, [r3, r0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00083a:	6958      	ldr	r0, [r3, #20]
}
1a00083c:	f000 0001 	and.w	r0, r0, #1
1a000840:	4770      	bx	lr
1a000842:	bf00      	nop
1a000844:	1a002518 	.word	0x1a002518

1a000848 <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a000848:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00084c:	0080      	lsls	r0, r0, #2
1a00084e:	4b03      	ldr	r3, [pc, #12]	; (1a00085c <uartTxReady+0x14>)
1a000850:	581b      	ldr	r3, [r3, r0]
1a000852:	6958      	ldr	r0, [r3, #20]
}
1a000854:	f000 0020 	and.w	r0, r0, #32
1a000858:	4770      	bx	lr
1a00085a:	bf00      	nop
1a00085c:	1a002518 	.word	0x1a002518

1a000860 <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a000860:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000864:	0080      	lsls	r0, r0, #2
1a000866:	4b02      	ldr	r3, [pc, #8]	; (1a000870 <uartRxRead+0x10>)
1a000868:	581b      	ldr	r3, [r3, r0]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00086a:	6818      	ldr	r0, [r3, #0]
}
1a00086c:	b2c0      	uxtb	r0, r0
1a00086e:	4770      	bx	lr
1a000870:	1a002518 	.word	0x1a002518

1a000874 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a000874:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000878:	0080      	lsls	r0, r0, #2
1a00087a:	4b02      	ldr	r3, [pc, #8]	; (1a000884 <uartTxWrite+0x10>)
1a00087c:	581b      	ldr	r3, [r3, r0]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a00087e:	6019      	str	r1, [r3, #0]
1a000880:	4770      	bx	lr
1a000882:	bf00      	nop
1a000884:	1a002518 	.word	0x1a002518

1a000888 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a000888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00088c:	4607      	mov	r7, r0
1a00088e:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a000890:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a000900 <uartInit+0x78>
1a000894:	0044      	lsls	r4, r0, #1
1a000896:	1823      	adds	r3, r4, r0
1a000898:	009b      	lsls	r3, r3, #2
1a00089a:	eb08 0503 	add.w	r5, r8, r3
1a00089e:	f858 6003 	ldr.w	r6, [r8, r3]
1a0008a2:	4630      	mov	r0, r6
1a0008a4:	f000 fa1c 	bl	1a000ce0 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0008a8:	4630      	mov	r0, r6
1a0008aa:	4649      	mov	r1, r9
1a0008ac:	f000 fa9e 	bl	1a000dec <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a0008b0:	2307      	movs	r3, #7
1a0008b2:	60b3      	str	r3, [r6, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0008b4:	6833      	ldr	r3, [r6, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a0008b6:	2301      	movs	r3, #1
1a0008b8:	65f3      	str	r3, [r6, #92]	; 0x5c
   // Dummy read
   Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0008ba:	7929      	ldrb	r1, [r5, #4]
1a0008bc:	796b      	ldrb	r3, [r5, #5]
1a0008be:	79aa      	ldrb	r2, [r5, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0008c0:	f042 0218 	orr.w	r2, r2, #24
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0008c4:	480c      	ldr	r0, [pc, #48]	; (1a0008f8 <uartInit+0x70>)
1a0008c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0008ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0008ce:	79ee      	ldrb	r6, [r5, #7]
1a0008d0:	7a2a      	ldrb	r2, [r5, #8]
1a0008d2:	7a69      	ldrb	r1, [r5, #9]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0008d4:	f041 01d0 	orr.w	r1, r1, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0008d8:	eb02 1346 	add.w	r3, r2, r6, lsl #5
1a0008dc:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0008e0:	2f01      	cmp	r7, #1
1a0008e2:	d107      	bne.n	1a0008f4 <uartInit+0x6c>
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0008e4:	4a05      	ldr	r2, [pc, #20]	; (1a0008fc <uartInit+0x74>)
1a0008e6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0008e8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0008ee:	221a      	movs	r2, #26
1a0008f0:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
1a0008f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0008f8:	40086000 	.word	0x40086000
1a0008fc:	40081000 	.word	0x40081000
1a000900:	1a002518 	.word	0x1a002518

1a000904 <uartReadByte>:
   }
}

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a000904:	b538      	push	{r3, r4, r5, lr}
1a000906:	4605      	mov	r5, r0
1a000908:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a00090a:	f7ff ff91 	bl	1a000830 <uartRxReady>
1a00090e:	b128      	cbz	r0, 1a00091c <uartReadByte+0x18>
      *receivedByte = uartRxRead(uart);
1a000910:	4628      	mov	r0, r5
1a000912:	f7ff ffa5 	bl	1a000860 <uartRxRead>
1a000916:	7020      	strb	r0, [r4, #0]
}

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
   bool_t retVal = TRUE;
1a000918:	2001      	movs	r0, #1
1a00091a:	bd38      	pop	{r3, r4, r5, pc}
   if ( uartRxReady(uart) ) {
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
1a00091c:	2000      	movs	r0, #0
   }
   return retVal;
}
1a00091e:	bd38      	pop	{r3, r4, r5, pc}

1a000920 <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a000920:	b538      	push	{r3, r4, r5, lr}
1a000922:	4604      	mov	r4, r0
1a000924:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a000926:	4620      	mov	r0, r4
1a000928:	f7ff ff8e 	bl	1a000848 <uartTxReady>
1a00092c:	2800      	cmp	r0, #0
1a00092e:	d0fa      	beq.n	1a000926 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a000930:	4620      	mov	r0, r4
1a000932:	4629      	mov	r1, r5
1a000934:	f7ff ff9e 	bl	1a000874 <uartTxWrite>
1a000938:	bd38      	pop	{r3, r4, r5, pc}
1a00093a:	bf00      	nop

1a00093c <uartWriteString>:
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a00093c:	b538      	push	{r3, r4, r5, lr}
1a00093e:	4605      	mov	r5, r0
1a000940:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a000942:	e003      	b.n	1a00094c <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a000944:	4628      	mov	r0, r5
1a000946:	f7ff ffeb 	bl	1a000920 <uartWriteByte>
      str++;
1a00094a:	3401      	adds	r4, #1
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
   while( *str != 0 ) {
1a00094c:	7821      	ldrb	r1, [r4, #0]
1a00094e:	2900      	cmp	r1, #0
1a000950:	d1f8      	bne.n	1a000944 <uartWriteString+0x8>
      uartWriteByte( uart, (uint8_t)*str );
      str++;
   }
}
1a000952:	bd38      	pop	{r3, r4, r5, pc}

1a000954 <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a000954:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a000956:	2003      	movs	r0, #3
1a000958:	f7ff ff14 	bl	1a000784 <uartProcessIRQ>
1a00095c:	bd08      	pop	{r3, pc}
1a00095e:	bf00      	nop

1a000960 <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a000960:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a000962:	2005      	movs	r0, #5
1a000964:	f7ff ff0e 	bl	1a000784 <uartProcessIRQ>
1a000968:	bd08      	pop	{r3, pc}
1a00096a:	bf00      	nop

1a00096c <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a00096c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000970:	4680      	mov	r8, r0
1a000972:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a000974:	f7ff fe9e 	bl	1a0006b4 <tickRead>
1a000978:	4606      	mov	r6, r0
1a00097a:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a00097c:	f7ff fe9a 	bl	1a0006b4 <tickRead>
1a000980:	1b84      	subs	r4, r0, r6
1a000982:	eb61 0507 	sbc.w	r5, r1, r7
1a000986:	4640      	mov	r0, r8
1a000988:	4649      	mov	r1, r9
1a00098a:	4b05      	ldr	r3, [pc, #20]	; (1a0009a0 <delay+0x34>)
1a00098c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000990:	f001 fa20 	bl	1a001dd4 <__aeabi_uldivmod>
1a000994:	428d      	cmp	r5, r1
1a000996:	bf08      	it	eq
1a000998:	4284      	cmpeq	r4, r0
1a00099a:	d3ef      	bcc.n	1a00097c <delay+0x10>
}
1a00099c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0009a0:	100000c8 	.word	0x100000c8

1a0009a4 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a0009a4:	e7fe      	b.n	1a0009a4 <errorOcurred>
1a0009a6:	bf00      	nop

1a0009a8 <doNothing>:
}

static void doNothing( void* ptr )
{
1a0009a8:	4770      	bx	lr
1a0009aa:	bf00      	nop

1a0009ac <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0009ac:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0009ae:	2400      	movs	r4, #0
1a0009b0:	e013      	b.n	1a0009da <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0009b2:	4b0b      	ldr	r3, [pc, #44]	; (1a0009e0 <TIMER0_IRQHandler+0x34>)
1a0009b4:	681a      	ldr	r2, [r3, #0]
1a0009b6:	f004 010f 	and.w	r1, r4, #15
1a0009ba:	2301      	movs	r3, #1
1a0009bc:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0009be:	421a      	tst	r2, r3
1a0009c0:	d009      	beq.n	1a0009d6 <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0009c2:	4b08      	ldr	r3, [pc, #32]	; (1a0009e4 <TIMER0_IRQHandler+0x38>)
1a0009c4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0009c8:	2000      	movs	r0, #0
1a0009ca:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0009cc:	b262      	sxtb	r2, r4
1a0009ce:	2301      	movs	r3, #1
1a0009d0:	4093      	lsls	r3, r2
1a0009d2:	4a03      	ldr	r2, [pc, #12]	; (1a0009e0 <TIMER0_IRQHandler+0x34>)
1a0009d4:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0009d6:	3401      	adds	r4, #1
1a0009d8:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0009da:	2c03      	cmp	r4, #3
1a0009dc:	d9e9      	bls.n	1a0009b2 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0009de:	bd10      	pop	{r4, pc}
1a0009e0:	40084000 	.word	0x40084000
1a0009e4:	10000050 	.word	0x10000050

1a0009e8 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0009e8:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0009ea:	2400      	movs	r4, #0
1a0009ec:	e014      	b.n	1a000a18 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0009ee:	4b0c      	ldr	r3, [pc, #48]	; (1a000a20 <TIMER1_IRQHandler+0x38>)
1a0009f0:	681a      	ldr	r2, [r3, #0]
1a0009f2:	f004 010f 	and.w	r1, r4, #15
1a0009f6:	2301      	movs	r3, #1
1a0009f8:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0009fa:	421a      	tst	r2, r3
1a0009fc:	d00a      	beq.n	1a000a14 <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0009fe:	1d23      	adds	r3, r4, #4
1a000a00:	4a08      	ldr	r2, [pc, #32]	; (1a000a24 <TIMER1_IRQHandler+0x3c>)
1a000a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000a06:	2000      	movs	r0, #0
1a000a08:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000a0a:	b262      	sxtb	r2, r4
1a000a0c:	2301      	movs	r3, #1
1a000a0e:	4093      	lsls	r3, r2
1a000a10:	4a03      	ldr	r2, [pc, #12]	; (1a000a20 <TIMER1_IRQHandler+0x38>)
1a000a12:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000a14:	3401      	adds	r4, #1
1a000a16:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000a18:	2c03      	cmp	r4, #3
1a000a1a:	d9e8      	bls.n	1a0009ee <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a000a1c:	bd10      	pop	{r4, pc}
1a000a1e:	bf00      	nop
1a000a20:	40085000 	.word	0x40085000
1a000a24:	10000050 	.word	0x10000050

1a000a28 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a000a28:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000a2a:	2400      	movs	r4, #0
1a000a2c:	e015      	b.n	1a000a5a <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000a2e:	4b0c      	ldr	r3, [pc, #48]	; (1a000a60 <TIMER2_IRQHandler+0x38>)
1a000a30:	681a      	ldr	r2, [r3, #0]
1a000a32:	f004 010f 	and.w	r1, r4, #15
1a000a36:	2301      	movs	r3, #1
1a000a38:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a000a3a:	421a      	tst	r2, r3
1a000a3c:	d00b      	beq.n	1a000a56 <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000a3e:	f104 0308 	add.w	r3, r4, #8
1a000a42:	4a08      	ldr	r2, [pc, #32]	; (1a000a64 <TIMER2_IRQHandler+0x3c>)
1a000a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000a48:	2000      	movs	r0, #0
1a000a4a:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000a4c:	b262      	sxtb	r2, r4
1a000a4e:	2301      	movs	r3, #1
1a000a50:	4093      	lsls	r3, r2
1a000a52:	4a03      	ldr	r2, [pc, #12]	; (1a000a60 <TIMER2_IRQHandler+0x38>)
1a000a54:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000a56:	3401      	adds	r4, #1
1a000a58:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000a5a:	2c03      	cmp	r4, #3
1a000a5c:	d9e7      	bls.n	1a000a2e <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a000a5e:	bd10      	pop	{r4, pc}
1a000a60:	400c3000 	.word	0x400c3000
1a000a64:	10000050 	.word	0x10000050

1a000a68 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a000a68:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000a6a:	2400      	movs	r4, #0
1a000a6c:	e015      	b.n	1a000a9a <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000a6e:	4b0c      	ldr	r3, [pc, #48]	; (1a000aa0 <TIMER3_IRQHandler+0x38>)
1a000a70:	681a      	ldr	r2, [r3, #0]
1a000a72:	f004 010f 	and.w	r1, r4, #15
1a000a76:	2301      	movs	r3, #1
1a000a78:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a000a7a:	421a      	tst	r2, r3
1a000a7c:	d00b      	beq.n	1a000a96 <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000a7e:	f104 030c 	add.w	r3, r4, #12
1a000a82:	4a08      	ldr	r2, [pc, #32]	; (1a000aa4 <TIMER3_IRQHandler+0x3c>)
1a000a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000a88:	2000      	movs	r0, #0
1a000a8a:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000a8c:	b262      	sxtb	r2, r4
1a000a8e:	2301      	movs	r3, #1
1a000a90:	4093      	lsls	r3, r2
1a000a92:	4a03      	ldr	r2, [pc, #12]	; (1a000aa0 <TIMER3_IRQHandler+0x38>)
1a000a94:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000a96:	3401      	adds	r4, #1
1a000a98:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000a9a:	2c03      	cmp	r4, #3
1a000a9c:	d9e7      	bls.n	1a000a6e <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a000a9e:	bd10      	pop	{r4, pc}
1a000aa0:	400c4000 	.word	0x400c4000
1a000aa4:	10000050 	.word	0x10000050

1a000aa8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a000aa8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a000aaa:	f000 fbe7 	bl	1a00127c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a000aae:	4b3a      	ldr	r3, [pc, #232]	; (1a000b98 <boardInit+0xf0>)
1a000ab0:	6818      	ldr	r0, [r3, #0]
1a000ab2:	f7ff fc5f 	bl	1a000374 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a000ab6:	2001      	movs	r0, #1
1a000ab8:	2100      	movs	r1, #0
1a000aba:	f7ff fe0d 	bl	1a0006d8 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a000abe:	2000      	movs	r0, #0
1a000ac0:	2105      	movs	r1, #5
1a000ac2:	f7ff fcc5 	bl	1a000450 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a000ac6:	2024      	movs	r0, #36	; 0x24
1a000ac8:	2100      	movs	r1, #0
1a000aca:	f7ff fcc1 	bl	1a000450 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a000ace:	2025      	movs	r0, #37	; 0x25
1a000ad0:	2100      	movs	r1, #0
1a000ad2:	f7ff fcbd 	bl	1a000450 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a000ad6:	2026      	movs	r0, #38	; 0x26
1a000ad8:	2100      	movs	r1, #0
1a000ada:	f7ff fcb9 	bl	1a000450 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a000ade:	2027      	movs	r0, #39	; 0x27
1a000ae0:	2100      	movs	r1, #0
1a000ae2:	f7ff fcb5 	bl	1a000450 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a000ae6:	2028      	movs	r0, #40	; 0x28
1a000ae8:	2101      	movs	r1, #1
1a000aea:	f7ff fcb1 	bl	1a000450 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a000aee:	2029      	movs	r0, #41	; 0x29
1a000af0:	2101      	movs	r1, #1
1a000af2:	f7ff fcad 	bl	1a000450 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a000af6:	202a      	movs	r0, #42	; 0x2a
1a000af8:	2101      	movs	r1, #1
1a000afa:	f7ff fca9 	bl	1a000450 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a000afe:	202b      	movs	r0, #43	; 0x2b
1a000b00:	2101      	movs	r1, #1
1a000b02:	f7ff fca5 	bl	1a000450 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a000b06:	202c      	movs	r0, #44	; 0x2c
1a000b08:	2101      	movs	r1, #1
1a000b0a:	f7ff fca1 	bl	1a000450 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a000b0e:	202d      	movs	r0, #45	; 0x2d
1a000b10:	2101      	movs	r1, #1
1a000b12:	f7ff fc9d 	bl	1a000450 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a000b16:	202e      	movs	r0, #46	; 0x2e
1a000b18:	2100      	movs	r1, #0
1a000b1a:	f7ff fc99 	bl	1a000450 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a000b1e:	202f      	movs	r0, #47	; 0x2f
1a000b20:	2100      	movs	r1, #0
1a000b22:	f7ff fc95 	bl	1a000450 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a000b26:	2030      	movs	r0, #48	; 0x30
1a000b28:	2100      	movs	r1, #0
1a000b2a:	f7ff fc91 	bl	1a000450 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a000b2e:	2031      	movs	r0, #49	; 0x31
1a000b30:	2100      	movs	r1, #0
1a000b32:	f7ff fc8d 	bl	1a000450 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a000b36:	2032      	movs	r0, #50	; 0x32
1a000b38:	2100      	movs	r1, #0
1a000b3a:	f7ff fc89 	bl	1a000450 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a000b3e:	2033      	movs	r0, #51	; 0x33
1a000b40:	2100      	movs	r1, #0
1a000b42:	f7ff fc85 	bl	1a000450 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a000b46:	2034      	movs	r0, #52	; 0x34
1a000b48:	2100      	movs	r1, #0
1a000b4a:	f7ff fc81 	bl	1a000450 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a000b4e:	2035      	movs	r0, #53	; 0x35
1a000b50:	2100      	movs	r1, #0
1a000b52:	f7ff fc7d 	bl	1a000450 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a000b56:	2036      	movs	r0, #54	; 0x36
1a000b58:	2101      	movs	r1, #1
1a000b5a:	f7ff fc79 	bl	1a000450 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a000b5e:	2037      	movs	r0, #55	; 0x37
1a000b60:	2101      	movs	r1, #1
1a000b62:	f7ff fc75 	bl	1a000450 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a000b66:	2038      	movs	r0, #56	; 0x38
1a000b68:	2101      	movs	r1, #1
1a000b6a:	f7ff fc71 	bl	1a000450 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a000b6e:	2039      	movs	r0, #57	; 0x39
1a000b70:	2101      	movs	r1, #1
1a000b72:	f7ff fc6d 	bl	1a000450 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a000b76:	203a      	movs	r0, #58	; 0x3a
1a000b78:	2101      	movs	r1, #1
1a000b7a:	f7ff fc69 	bl	1a000450 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a000b7e:	203b      	movs	r0, #59	; 0x3b
1a000b80:	2101      	movs	r1, #1
1a000b82:	f7ff fc65 	bl	1a000450 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a000b86:	203c      	movs	r0, #60	; 0x3c
1a000b88:	2101      	movs	r1, #1
1a000b8a:	f7ff fc61 	bl	1a000450 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a000b8e:	203d      	movs	r0, #61	; 0x3d
1a000b90:	2101      	movs	r1, #1
1a000b92:	f7ff fc5d 	bl	1a000450 <gpioInit>
1a000b96:	bd08      	pop	{r3, pc}
1a000b98:	100000d0 	.word	0x100000d0

1a000b9c <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a000b9c:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a000b9e:	4b04      	ldr	r3, [pc, #16]	; (1a000bb0 <SystemInit+0x14>)
1a000ba0:	4a04      	ldr	r2, [pc, #16]	; (1a000bb4 <SystemInit+0x18>)
1a000ba2:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a000ba4:	f001 f8a8 	bl	1a001cf8 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a000ba8:	f000 f85a 	bl	1a000c60 <Board_SystemInit>
1a000bac:	bd08      	pop	{r3, pc}
1a000bae:	bf00      	nop
1a000bb0:	e000ed08 	.word	0xe000ed08
1a000bb4:	1a000000 	.word	0x1a000000

1a000bb8 <Board_SetupMuxing>:
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a000bb8:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000bba:	2300      	movs	r3, #0
1a000bbc:	e00c      	b.n	1a000bd8 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000bbe:	4a09      	ldr	r2, [pc, #36]	; (1a000be4 <Board_SetupMuxing+0x2c>)
1a000bc0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000bc4:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000bc8:	784a      	ldrb	r2, [r1, #1]
1a000bca:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000bcc:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000bd0:	4905      	ldr	r1, [pc, #20]	; (1a000be8 <Board_SetupMuxing+0x30>)
1a000bd2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000bd6:	3301      	adds	r3, #1
1a000bd8:	2b17      	cmp	r3, #23
1a000bda:	d9f0      	bls.n	1a000bbe <Board_SetupMuxing+0x6>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000be0:	4770      	bx	lr
1a000be2:	bf00      	nop
1a000be4:	1a00257c 	.word	0x1a00257c
1a000be8:	40086000 	.word	0x40086000

1a000bec <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a000bec:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000bee:	4a19      	ldr	r2, [pc, #100]	; (1a000c54 <Board_SetupClocking+0x68>)
1a000bf0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000bf8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000bfc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000c00:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000c08:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000c0c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000c10:	2006      	movs	r0, #6
1a000c12:	4911      	ldr	r1, [pc, #68]	; (1a000c58 <Board_SetupClocking+0x6c>)
1a000c14:	2201      	movs	r2, #1
1a000c16:	f000 ffaf 	bl	1a001b78 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000c1a:	2400      	movs	r4, #0
1a000c1c:	e00d      	b.n	1a000c3a <Board_SetupClocking+0x4e>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000c1e:	4b0f      	ldr	r3, [pc, #60]	; (1a000c5c <Board_SetupClocking+0x70>)
1a000c20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
1a000c24:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
1a000c28:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
1a000c2c:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
1a000c30:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
1a000c34:	f000 fe3a 	bl	1a0018ac <Chip_Clock_SetBaseClock>
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000c38:	3401      	adds	r4, #1
1a000c3a:	2c02      	cmp	r4, #2
1a000c3c:	d9ef      	bls.n	1a000c1e <Board_SetupClocking+0x32>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000c3e:	4b05      	ldr	r3, [pc, #20]	; (1a000c54 <Board_SetupClocking+0x68>)
1a000c40:	685a      	ldr	r2, [r3, #4]
1a000c42:	f022 020c 	bic.w	r2, r2, #12
1a000c46:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000c48:	685a      	ldr	r2, [r3, #4]
1a000c4a:	f042 0203 	orr.w	r2, r2, #3
1a000c4e:	605a      	str	r2, [r3, #4]
1a000c50:	bd10      	pop	{r4, pc}
1a000c52:	bf00      	nop
1a000c54:	40043000 	.word	0x40043000
1a000c58:	0c28cb00 	.word	0x0c28cb00
1a000c5c:	1a00257c 	.word	0x1a00257c

1a000c60 <Board_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000c60:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a000c62:	f7ff ffa9 	bl	1a000bb8 <Board_SetupMuxing>
   Board_SetupClocking();
1a000c66:	f7ff ffc1 	bl	1a000bec <Board_SetupClocking>
1a000c6a:	bd08      	pop	{r3, pc}

1a000c6c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000c6c:	4b09      	ldr	r3, [pc, #36]	; (1a000c94 <Chip_UART_GetIndex+0x28>)
1a000c6e:	4298      	cmp	r0, r3
1a000c70:	d009      	beq.n	1a000c86 <Chip_UART_GetIndex+0x1a>
1a000c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000c76:	4298      	cmp	r0, r3
1a000c78:	d007      	beq.n	1a000c8a <Chip_UART_GetIndex+0x1e>
1a000c7a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000c7e:	4298      	cmp	r0, r3
1a000c80:	d005      	beq.n	1a000c8e <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000c82:	2000      	movs	r0, #0
1a000c84:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000c86:	2002      	movs	r0, #2
1a000c88:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000c8a:	2003      	movs	r0, #3
1a000c8c:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a000c8e:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a000c90:	4770      	bx	lr
1a000c92:	bf00      	nop
1a000c94:	400c1000 	.word	0x400c1000

1a000c98 <Chip_UART_ABIntHandler>:
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Current pending interrupt status per the IIR register
 */
STATIC INLINE uint32_t Chip_UART_ReadIntIDReg(LPC_USART_T *pUART)
{
	return pUART->IIR;
1a000c98:	6883      	ldr	r3, [r0, #8]

/* UART Autobaud command interrupt handler */
STATIC void Chip_UART_ABIntHandler(LPC_USART_T *pUART)
{
	/* Handle End Of Autobaud interrupt */
	if((Chip_UART_ReadIntIDReg(pUART) & UART_IIR_ABEO_INT) != 0) {
1a000c9a:	f413 7f80 	tst.w	r3, #256	; 0x100
1a000c9e:	d00f      	beq.n	1a000cc0 <Chip_UART_ABIntHandler+0x28>
 * @note	Use an Or'ed value of UART_ACR_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetAutoBaudReg(LPC_USART_T *pUART, uint32_t acr)
{
	pUART->ACR |= acr;
1a000ca0:	6a03      	ldr	r3, [r0, #32]
1a000ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a000ca6:	6203      	str	r3, [r0, #32]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a000ca8:	6843      	ldr	r3, [r0, #4]
1a000caa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
1a000cae:	6043      	str	r3, [r0, #4]
        Chip_UART_SetAutoBaudReg(pUART, UART_ACR_ABEOINT_CLR);
		Chip_UART_IntDisable(pUART, UART_IER_ABEOINT);
	    if (ABsyncSts == RESET) {
1a000cb0:	4b0a      	ldr	r3, [pc, #40]	; (1a000cdc <Chip_UART_ABIntHandler+0x44>)
1a000cb2:	781b      	ldrb	r3, [r3, #0]
1a000cb4:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000cb8:	d102      	bne.n	1a000cc0 <Chip_UART_ABIntHandler+0x28>
	        ABsyncSts = SET;
1a000cba:	2201      	movs	r2, #1
1a000cbc:	4b07      	ldr	r3, [pc, #28]	; (1a000cdc <Chip_UART_ABIntHandler+0x44>)
1a000cbe:	701a      	strb	r2, [r3, #0]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Current pending interrupt status per the IIR register
 */
STATIC INLINE uint32_t Chip_UART_ReadIntIDReg(LPC_USART_T *pUART)
{
	return pUART->IIR;
1a000cc0:	6883      	ldr	r3, [r0, #8]
        }
	}

    /* Handle Autobaud Timeout interrupt */
	if((Chip_UART_ReadIntIDReg(pUART) & UART_IIR_ABTO_INT) != 0) {
1a000cc2:	f413 7f00 	tst.w	r3, #512	; 0x200
1a000cc6:	d007      	beq.n	1a000cd8 <Chip_UART_ABIntHandler+0x40>
 * @note	Use an Or'ed value of UART_ACR_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetAutoBaudReg(LPC_USART_T *pUART, uint32_t acr)
{
	pUART->ACR |= acr;
1a000cc8:	6a03      	ldr	r3, [r0, #32]
1a000cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a000cce:	6203      	str	r3, [r0, #32]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a000cd0:	6843      	ldr	r3, [r0, #4]
1a000cd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
1a000cd6:	6043      	str	r3, [r0, #4]
1a000cd8:	4770      	bx	lr
1a000cda:	bf00      	nop
1a000cdc:	100000b0 	.word	0x100000b0

1a000ce0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000ce0:	b510      	push	{r4, lr}
1a000ce2:	b082      	sub	sp, #8
1a000ce4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000ce6:	f7ff ffc1 	bl	1a000c6c <Chip_UART_GetIndex>
1a000cea:	4b0f      	ldr	r3, [pc, #60]	; (1a000d28 <Chip_UART_Init+0x48>)
1a000cec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000cf0:	2101      	movs	r1, #1
1a000cf2:	460a      	mov	r2, r1
1a000cf4:	460b      	mov	r3, r1
1a000cf6:	f000 fe55 	bl	1a0019a4 <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a000cfa:	2307      	movs	r3, #7
1a000cfc:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a000cfe:	2300      	movs	r3, #0
1a000d00:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000d02:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000d04:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000d06:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000d08:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000d0a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000d0c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000d0e:	4b07      	ldr	r3, [pc, #28]	; (1a000d2c <Chip_UART_Init+0x4c>)
1a000d10:	429c      	cmp	r4, r3
1a000d12:	d103      	bne.n	1a000d1c <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a000d14:	2300      	movs	r3, #0
1a000d16:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a000d18:	69a3      	ldr	r3, [r4, #24]
1a000d1a:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000d1c:	2303      	movs	r3, #3
1a000d1e:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000d20:	2310      	movs	r3, #16
1a000d22:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a000d24:	b002      	add	sp, #8
1a000d26:	bd10      	pop	{r4, pc}
1a000d28:	1a0025e8 	.word	0x1a0025e8
1a000d2c:	40082000 	.word	0x40082000

1a000d30 <Chip_UART_DeInit>:

/* De-initializes the pUART peripheral */
void Chip_UART_DeInit(LPC_USART_T *pUART)
{
1a000d30:	b508      	push	{r3, lr}
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a000d32:	2200      	movs	r2, #0
1a000d34:	65c2      	str	r2, [r0, #92]	; 0x5c
    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable clock */
	Chip_Clock_Disable(UART_PClock[Chip_UART_GetIndex(pUART)]);
1a000d36:	f7ff ff99 	bl	1a000c6c <Chip_UART_GetIndex>
1a000d3a:	4b03      	ldr	r3, [pc, #12]	; (1a000d48 <Chip_UART_DeInit+0x18>)
1a000d3c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000d40:	f000 fe74 	bl	1a001a2c <Chip_Clock_Disable>
1a000d44:	bd08      	pop	{r3, pc}
1a000d46:	bf00      	nop
1a000d48:	1a0025e8 	.word	0x1a0025e8

1a000d4c <Chip_UART_Send>:
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
1a000d4c:	b410      	push	{r4}
	int sent = 0;
1a000d4e:	2300      	movs	r3, #0
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
1a000d50:	e003      	b.n	1a000d5a <Chip_UART_Send+0xe>
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
		Chip_UART_SendByte(pUART, *p8);
1a000d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a000d56:	6004      	str	r4, [r0, #0]
		p8++;
		sent++;
1a000d58:	3301      	adds	r3, #1
{
	int sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
1a000d5a:	4293      	cmp	r3, r2
1a000d5c:	da03      	bge.n	1a000d66 <Chip_UART_Send+0x1a>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000d5e:	6944      	ldr	r4, [r0, #20]
1a000d60:	f014 0f20 	tst.w	r4, #32
1a000d64:	d1f5      	bne.n	1a000d52 <Chip_UART_Send+0x6>
		p8++;
		sent++;
	}

	return sent;
}
1a000d66:	4618      	mov	r0, r3
1a000d68:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000d6c:	4770      	bx	lr
1a000d6e:	bf00      	nop

1a000d70 <Chip_UART_CheckBusy>:

/* Check whether if UART is busy or not */
FlagStatus Chip_UART_CheckBusy(LPC_USART_T *pUART)
{
	if (pUART->LSR & UART_LSR_TEMT) {
1a000d70:	6943      	ldr	r3, [r0, #20]
1a000d72:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000d76:	d001      	beq.n	1a000d7c <Chip_UART_CheckBusy+0xc>
		return RESET;
1a000d78:	2000      	movs	r0, #0
1a000d7a:	4770      	bx	lr
	}
	else {
		return SET;
1a000d7c:	2001      	movs	r0, #1
	}
}
1a000d7e:	4770      	bx	lr

1a000d80 <Chip_UART_SendBlocking>:

/* Transmit a byte array through the UART peripheral (blocking) */
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
1a000d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000d82:	4607      	mov	r7, r0
1a000d84:	460d      	mov	r5, r1
1a000d86:	4614      	mov	r4, r2
	int pass, sent = 0;
1a000d88:	2600      	movs	r6, #0
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
1a000d8a:	e007      	b.n	1a000d9c <Chip_UART_SendBlocking+0x1c>
		pass = Chip_UART_Send(pUART, p8, numBytes);
1a000d8c:	4638      	mov	r0, r7
1a000d8e:	4629      	mov	r1, r5
1a000d90:	4622      	mov	r2, r4
1a000d92:	f7ff ffdb 	bl	1a000d4c <Chip_UART_Send>
		numBytes -= pass;
1a000d96:	1a24      	subs	r4, r4, r0
		sent += pass;
1a000d98:	4406      	add	r6, r0
		p8 += pass;
1a000d9a:	4405      	add	r5, r0
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
	int pass, sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
1a000d9c:	2c00      	cmp	r4, #0
1a000d9e:	dcf5      	bgt.n	1a000d8c <Chip_UART_SendBlocking+0xc>
		sent += pass;
		p8 += pass;
	}

	return sent;
}
1a000da0:	4630      	mov	r0, r6
1a000da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a000da4 <Chip_UART_Read>:

/* Read data through the UART peripheral (non-blocking) */
int Chip_UART_Read(LPC_USART_T *pUART, void *data, int numBytes)
{
1a000da4:	b410      	push	{r4}
	int readBytes = 0;
1a000da6:	2300      	movs	r3, #0
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((readBytes < numBytes) &&
1a000da8:	e003      	b.n	1a000db2 <Chip_UART_Read+0xe>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000daa:	6804      	ldr	r4, [r0, #0]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) != 0)) {
		*p8 = Chip_UART_ReadByte(pUART);
1a000dac:	f801 4b01 	strb.w	r4, [r1], #1
		p8++;
		readBytes++;
1a000db0:	3301      	adds	r3, #1
{
	int readBytes = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((readBytes < numBytes) &&
1a000db2:	4293      	cmp	r3, r2
1a000db4:	da03      	bge.n	1a000dbe <Chip_UART_Read+0x1a>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000db6:	6944      	ldr	r4, [r0, #20]
1a000db8:	f014 0f01 	tst.w	r4, #1
1a000dbc:	d1f5      	bne.n	1a000daa <Chip_UART_Read+0x6>
		p8++;
		readBytes++;
	}

	return readBytes;
}
1a000dbe:	4618      	mov	r0, r3
1a000dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000dc4:	4770      	bx	lr
1a000dc6:	bf00      	nop

1a000dc8 <Chip_UART_ReadBlocking>:

/* Read data through the UART peripheral (blocking) */
int Chip_UART_ReadBlocking(LPC_USART_T *pUART, void *data, int numBytes)
{
1a000dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000dca:	4607      	mov	r7, r0
1a000dcc:	460d      	mov	r5, r1
1a000dce:	4614      	mov	r4, r2
	int pass, readBytes = 0;
1a000dd0:	2600      	movs	r6, #0
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
1a000dd2:	e007      	b.n	1a000de4 <Chip_UART_ReadBlocking+0x1c>
		pass = Chip_UART_Read(pUART, p8, numBytes);
1a000dd4:	4638      	mov	r0, r7
1a000dd6:	4629      	mov	r1, r5
1a000dd8:	4622      	mov	r2, r4
1a000dda:	f7ff ffe3 	bl	1a000da4 <Chip_UART_Read>
		numBytes -= pass;
1a000dde:	1a24      	subs	r4, r4, r0
		readBytes += pass;
1a000de0:	4406      	add	r6, r0
		p8 += pass;
1a000de2:	4405      	add	r5, r0
int Chip_UART_ReadBlocking(LPC_USART_T *pUART, void *data, int numBytes)
{
	int pass, readBytes = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
1a000de4:	2c00      	cmp	r4, #0
1a000de6:	dcf5      	bgt.n	1a000dd4 <Chip_UART_ReadBlocking+0xc>
		readBytes += pass;
		p8 += pass;
	}

	return readBytes;
}
1a000de8:	4630      	mov	r0, r6
1a000dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a000dec <Chip_UART_SetBaud>:

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a000dec:	b538      	push	{r3, r4, r5, lr}
1a000dee:	4605      	mov	r5, r0
1a000df0:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000df2:	f7ff ff3b 	bl	1a000c6c <Chip_UART_GetIndex>
1a000df6:	4b0d      	ldr	r3, [pc, #52]	; (1a000e2c <Chip_UART_SetBaud+0x40>)
1a000df8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a000dfc:	8900      	ldrh	r0, [r0, #8]
1a000dfe:	f000 fe43 	bl	1a001a88 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a000e02:	0124      	lsls	r4, r4, #4
1a000e04:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000e08:	68ea      	ldr	r2, [r5, #12]
1a000e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a000e0e:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000e10:	b2da      	uxtb	r2, r3
1a000e12:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a000e14:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a000e18:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000e1a:	68ea      	ldr	r2, [r5, #12]
1a000e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a000e20:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a000e22:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a000e26:	0900      	lsrs	r0, r0, #4
1a000e28:	bd38      	pop	{r3, r4, r5, pc}
1a000e2a:	bf00      	nop
1a000e2c:	1a0025e8 	.word	0x1a0025e8

1a000e30 <Chip_UART_RXIntHandlerRB>:

/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
1a000e30:	b530      	push	{r4, r5, lr}
1a000e32:	b083      	sub	sp, #12
1a000e34:	4604      	mov	r4, r0
1a000e36:	460d      	mov	r5, r1
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
1a000e38:	e006      	b.n	1a000e48 <Chip_UART_RXIntHandlerRB+0x18>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000e3a:	6823      	ldr	r3, [r4, #0]
		uint8_t ch = Chip_UART_ReadByte(pUART);
1a000e3c:	a902      	add	r1, sp, #8
1a000e3e:	f801 3d01 	strb.w	r3, [r1, #-1]!
		RingBuffer_Insert(pRB, &ch);
1a000e42:	4628      	mov	r0, r5
1a000e44:	f000 f908 	bl	1a001058 <RingBuffer_Insert>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000e48:	6963      	ldr	r3, [r4, #20]

/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
1a000e4a:	f013 0f01 	tst.w	r3, #1
1a000e4e:	d1f4      	bne.n	1a000e3a <Chip_UART_RXIntHandlerRB+0xa>
		uint8_t ch = Chip_UART_ReadByte(pUART);
		RingBuffer_Insert(pRB, &ch);
	}
}
1a000e50:	b003      	add	sp, #12
1a000e52:	bd30      	pop	{r4, r5, pc}

1a000e54 <Chip_UART_TXIntHandlerRB>:

/* UART transmit-only interrupt handler for ring buffers */
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
1a000e54:	b530      	push	{r4, r5, lr}
1a000e56:	b083      	sub	sp, #12
1a000e58:	4604      	mov	r4, r0
1a000e5a:	460d      	mov	r5, r1
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
1a000e5c:	e002      	b.n	1a000e64 <Chip_UART_TXIntHandlerRB+0x10>
		   RingBuffer_Pop(pRB, &ch)) {
		Chip_UART_SendByte(pUART, ch);
1a000e5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a000e62:	6023      	str	r3, [r4, #0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000e64:	6963      	ldr	r3, [r4, #20]
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
1a000e66:	f013 0f20 	tst.w	r3, #32
1a000e6a:	d006      	beq.n	1a000e7a <Chip_UART_TXIntHandlerRB+0x26>
		   RingBuffer_Pop(pRB, &ch)) {
1a000e6c:	4628      	mov	r0, r5
1a000e6e:	f10d 0107 	add.w	r1, sp, #7
1a000e72:	f000 f951 	bl	1a001118 <RingBuffer_Pop>
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
1a000e76:	2800      	cmp	r0, #0
1a000e78:	d1f1      	bne.n	1a000e5e <Chip_UART_TXIntHandlerRB+0xa>
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
STATIC INLINE int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
1a000e7a:	68ea      	ldr	r2, [r5, #12]
1a000e7c:	692b      	ldr	r3, [r5, #16]
		   RingBuffer_Pop(pRB, &ch)) {
		Chip_UART_SendByte(pUART, ch);
	}

	/* Turn off interrupt if the ring buffer is empty */
	if (RingBuffer_IsEmpty(pRB)) {
1a000e7e:	429a      	cmp	r2, r3
1a000e80:	d103      	bne.n	1a000e8a <Chip_UART_TXIntHandlerRB+0x36>
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a000e82:	6863      	ldr	r3, [r4, #4]
1a000e84:	f023 0302 	bic.w	r3, r3, #2
1a000e88:	6063      	str	r3, [r4, #4]
		/* Shut down transmit */
		Chip_UART_IntDisable(pUART, UART_IER_THREINT);
	}
}
1a000e8a:	b003      	add	sp, #12
1a000e8c:	bd30      	pop	{r4, r5, pc}
1a000e8e:	bf00      	nop

1a000e90 <Chip_UART_SendRB>:

/* Populate a transmit ring buffer and start UART transmit */
uint32_t Chip_UART_SendRB(LPC_USART_T *pUART, RINGBUFF_T *pRB, const void *data, int bytes)
{
1a000e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000e94:	4604      	mov	r4, r0
1a000e96:	460e      	mov	r6, r1
1a000e98:	4690      	mov	r8, r2
1a000e9a:	461f      	mov	r7, r3
1a000e9c:	6843      	ldr	r3, [r0, #4]
1a000e9e:	f023 0302 	bic.w	r3, r3, #2
1a000ea2:	6043      	str	r3, [r0, #4]

	/* Don't let UART transmit ring buffer change in the UART IRQ handler */
	Chip_UART_IntDisable(pUART, UART_IER_THREINT);

	/* Move as much data as possible into transmit ring buffer */
	ret = RingBuffer_InsertMult(pRB, p8, bytes);
1a000ea4:	4608      	mov	r0, r1
1a000ea6:	4611      	mov	r1, r2
1a000ea8:	463a      	mov	r2, r7
1a000eaa:	f000 f8ed 	bl	1a001088 <RingBuffer_InsertMult>
1a000eae:	4605      	mov	r5, r0
	Chip_UART_TXIntHandlerRB(pUART, pRB);
1a000eb0:	4620      	mov	r0, r4
1a000eb2:	4631      	mov	r1, r6
1a000eb4:	f7ff ffce 	bl	1a000e54 <Chip_UART_TXIntHandlerRB>

	/* Add additional data to transmit ring buffer if possible */
	ret += RingBuffer_InsertMult(pRB, (p8 + ret), (bytes - ret));
1a000eb8:	4630      	mov	r0, r6
1a000eba:	eb08 0105 	add.w	r1, r8, r5
1a000ebe:	1b7a      	subs	r2, r7, r5
1a000ec0:	f000 f8e2 	bl	1a001088 <RingBuffer_InsertMult>
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
1a000ec4:	6863      	ldr	r3, [r4, #4]
1a000ec6:	f043 0302 	orr.w	r3, r3, #2
1a000eca:	6063      	str	r3, [r4, #4]

	/* Enable UART transmit interrupt */
	Chip_UART_IntEnable(pUART, UART_IER_THREINT);

	return ret;
}
1a000ecc:	4428      	add	r0, r5
1a000ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000ed2:	bf00      	nop

1a000ed4 <Chip_UART_ReadRB>:

/* Copy data from a receive ring buffer */
int Chip_UART_ReadRB(LPC_USART_T *pUART, RINGBUFF_T *pRB, void *data, int bytes)
{
1a000ed4:	b508      	push	{r3, lr}
	(void) pUART;

	return RingBuffer_PopMult(pRB, (uint8_t *) data, bytes);
1a000ed6:	4608      	mov	r0, r1
1a000ed8:	4611      	mov	r1, r2
1a000eda:	461a      	mov	r2, r3
1a000edc:	f000 f934 	bl	1a001148 <RingBuffer_PopMult>
}
1a000ee0:	bd08      	pop	{r3, pc}
1a000ee2:	bf00      	nop

1a000ee4 <Chip_UART_IRQRBHandler>:

/* UART receive/transmit interrupt handler for ring buffers */
void Chip_UART_IRQRBHandler(LPC_USART_T *pUART, RINGBUFF_T *pRXRB, RINGBUFF_T *pTXRB)
{
1a000ee4:	b570      	push	{r4, r5, r6, lr}
1a000ee6:	4604      	mov	r4, r0
1a000ee8:	460e      	mov	r6, r1
	/* Handle transmit interrupt if enabled */
	if (pUART->IER & UART_IER_THREINT) {
1a000eea:	6843      	ldr	r3, [r0, #4]
1a000eec:	f013 0f02 	tst.w	r3, #2
1a000ef0:	d00b      	beq.n	1a000f0a <Chip_UART_IRQRBHandler+0x26>
1a000ef2:	4615      	mov	r5, r2
		Chip_UART_TXIntHandlerRB(pUART, pTXRB);
1a000ef4:	4611      	mov	r1, r2
1a000ef6:	f7ff ffad 	bl	1a000e54 <Chip_UART_TXIntHandlerRB>
1a000efa:	68ea      	ldr	r2, [r5, #12]
1a000efc:	692b      	ldr	r3, [r5, #16]

		/* Disable transmit interrupt if the ring buffer is empty */
		if (RingBuffer_IsEmpty(pTXRB)) {
1a000efe:	429a      	cmp	r2, r3
1a000f00:	d103      	bne.n	1a000f0a <Chip_UART_IRQRBHandler+0x26>
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a000f02:	6863      	ldr	r3, [r4, #4]
1a000f04:	f023 0302 	bic.w	r3, r3, #2
1a000f08:	6063      	str	r3, [r4, #4]
			Chip_UART_IntDisable(pUART, UART_IER_THREINT);
		}
	}

	/* Handle receive interrupt */
	Chip_UART_RXIntHandlerRB(pUART, pRXRB);
1a000f0a:	4620      	mov	r0, r4
1a000f0c:	4631      	mov	r1, r6
1a000f0e:	f7ff ff8f 	bl	1a000e30 <Chip_UART_RXIntHandlerRB>

    /* Handle Autobaud interrupts */
    Chip_UART_ABIntHandler(pUART);
1a000f12:	4620      	mov	r0, r4
1a000f14:	f7ff fec0 	bl	1a000c98 <Chip_UART_ABIntHandler>
1a000f18:	bd70      	pop	{r4, r5, r6, pc}
1a000f1a:	bf00      	nop

1a000f1c <Chip_UART_SetBaudFDR>:
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000f20:	b083      	sub	sp, #12
1a000f22:	4683      	mov	fp, r0
1a000f24:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000f26:	f7ff fea1 	bl	1a000c6c <Chip_UART_GetIndex>
1a000f2a:	4b35      	ldr	r3, [pc, #212]	; (1a001000 <Chip_UART_SetBaudFDR+0xe4>)
1a000f2c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a000f30:	8900      	ldrh	r0, [r0, #8]
1a000f32:	f000 fda9 	bl	1a001a88 <Chip_Clock_GetRate>
1a000f36:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a000f38:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000f3c:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000f3e:	2300      	movs	r3, #0
1a000f40:	9301      	str	r3, [sp, #4]
1a000f42:	46a2      	mov	sl, r4
1a000f44:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000f46:	e029      	b.n	1a000f9c <Chip_UART_SetBaudFDR+0x80>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000f48:	2300      	movs	r3, #0
1a000f4a:	0932      	lsrs	r2, r6, #4
1a000f4c:	0730      	lsls	r0, r6, #28
1a000f4e:	fba0 0104 	umull	r0, r1, r0, r4
1a000f52:	fb04 1102 	mla	r1, r4, r2, r1
1a000f56:	1962      	adds	r2, r4, r5
1a000f58:	fb08 f202 	mul.w	r2, r8, r2
1a000f5c:	f000 ff3a 	bl	1a001dd4 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a000f60:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a000f62:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a000f64:	2800      	cmp	r0, #0
1a000f66:	da01      	bge.n	1a000f6c <Chip_UART_SetBaudFDR+0x50>
				diff = -diff;
1a000f68:	4243      	negs	r3, r0
				div ++;
1a000f6a:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000f6c:	429f      	cmp	r7, r3
1a000f6e:	d30a      	bcc.n	1a000f86 <Chip_UART_SetBaudFDR+0x6a>
1a000f70:	b14a      	cbz	r2, 1a000f86 <Chip_UART_SetBaudFDR+0x6a>
1a000f72:	0c11      	lsrs	r1, r2, #16
1a000f74:	d107      	bne.n	1a000f86 <Chip_UART_SetBaudFDR+0x6a>
1a000f76:	2a02      	cmp	r2, #2
1a000f78:	d800      	bhi.n	1a000f7c <Chip_UART_SetBaudFDR+0x60>
1a000f7a:	b925      	cbnz	r5, 1a000f86 <Chip_UART_SetBaudFDR+0x6a>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000f7c:	b14b      	cbz	r3, 1a000f92 <Chip_UART_SetBaudFDR+0x76>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a000f7e:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a000f80:	9501      	str	r5, [sp, #4]
			sm = m;
1a000f82:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a000f84:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a000f86:	3501      	adds	r5, #1
1a000f88:	e000      	b.n	1a000f8c <Chip_UART_SetBaudFDR+0x70>
1a000f8a:	2500      	movs	r5, #0
1a000f8c:	42a5      	cmp	r5, r4
1a000f8e:	d3db      	bcc.n	1a000f48 <Chip_UART_SetBaudFDR+0x2c>
1a000f90:	e003      	b.n	1a000f9a <Chip_UART_SetBaudFDR+0x7e>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a000f92:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a000f94:	9501      	str	r5, [sp, #4]
			sm = m;
1a000f96:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a000f98:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000f9a:	3401      	adds	r4, #1
1a000f9c:	b10f      	cbz	r7, 1a000fa2 <Chip_UART_SetBaudFDR+0x86>
1a000f9e:	2c0f      	cmp	r4, #15
1a000fa0:	d9f3      	bls.n	1a000f8a <Chip_UART_SetBaudFDR+0x6e>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000fa2:	f1b9 0f00 	cmp.w	r9, #0
1a000fa6:	d026      	beq.n	1a000ff6 <Chip_UART_SetBaudFDR+0xda>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000fa8:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000fb0:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000fb4:	fa5f f389 	uxtb.w	r3, r9
1a000fb8:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a000fbc:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000fc0:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000fc4:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000fcc:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000fd0:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000fd4:	b2da      	uxtb	r2, r3
1a000fd6:	9901      	ldr	r1, [sp, #4]
1a000fd8:	f001 030f 	and.w	r3, r1, #15
1a000fdc:	4313      	orrs	r3, r2
1a000fde:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000fe2:	0933      	lsrs	r3, r6, #4
1a000fe4:	fb0a f303 	mul.w	r3, sl, r3
1a000fe8:	eb0a 0001 	add.w	r0, sl, r1
1a000fec:	fb09 f000 	mul.w	r0, r9, r0
1a000ff0:	fbb3 f0f0 	udiv	r0, r3, r0
1a000ff4:	e000      	b.n	1a000ff8 <Chip_UART_SetBaudFDR+0xdc>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a000ff6:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a000ff8:	b003      	add	sp, #12
1a000ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000ffe:	bf00      	nop
1a001000:	1a0025e8 	.word	0x1a0025e8

1a001004 <Chip_UART_GetABEOStatus>:

/* UART interrupt service routine */
FlagStatus Chip_UART_GetABEOStatus(LPC_USART_T *pUART)
{
	(void) pUART;
	return ABsyncSts;
1a001004:	4b01      	ldr	r3, [pc, #4]	; (1a00100c <Chip_UART_GetABEOStatus+0x8>)
1a001006:	7818      	ldrb	r0, [r3, #0]
}
1a001008:	4770      	bx	lr
1a00100a:	bf00      	nop
1a00100c:	100000b0 	.word	0x100000b0

1a001010 <Chip_UART_ABCmd>:
/* Start/Stop Auto Baudrate activity */
void Chip_UART_ABCmd(LPC_USART_T *pUART, uint32_t mode, bool autorestart, FunctionalState NewState)
{
    uint32_t tmp = 0;

	if (NewState == ENABLE) {
1a001010:	2b01      	cmp	r3, #1
1a001012:	d116      	bne.n	1a001042 <Chip_UART_ABCmd+0x32>
		/* Clear DLL and DLM value */
		pUART->LCR |= UART_LCR_DLAB_EN;
1a001014:	68c3      	ldr	r3, [r0, #12]
1a001016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00101a:	60c3      	str	r3, [r0, #12]
		pUART->DLL = 0;
1a00101c:	2300      	movs	r3, #0
1a00101e:	6003      	str	r3, [r0, #0]
		pUART->DLM = 0;
1a001020:	6043      	str	r3, [r0, #4]
		pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001022:	68c3      	ldr	r3, [r0, #12]
1a001024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001028:	60c3      	str	r3, [r0, #12]

		/* FDR value must be reset to default value */
		pUART->FDR = 0x10;
1a00102a:	2310      	movs	r3, #16
1a00102c:	6283      	str	r3, [r0, #40]	; 0x28

		if (mode == UART_ACR_MODE1) {
1a00102e:	2901      	cmp	r1, #1
1a001030:	d101      	bne.n	1a001036 <Chip_UART_ABCmd+0x26>
			tmp = UART_ACR_START | UART_ACR_MODE;
1a001032:	2303      	movs	r3, #3
1a001034:	e000      	b.n	1a001038 <Chip_UART_ABCmd+0x28>
		}
		else {
			tmp = UART_ACR_START;
1a001036:	2301      	movs	r3, #1
		}

		if (autorestart == true) {
1a001038:	b10a      	cbz	r2, 1a00103e <Chip_UART_ABCmd+0x2e>
			tmp |= UART_ACR_AUTO_RESTART;
1a00103a:	f043 0304 	orr.w	r3, r3, #4
		}
		pUART->ACR = tmp;
1a00103e:	6203      	str	r3, [r0, #32]
1a001040:	4770      	bx	lr
	}
	else {
		pUART->ACR = 0;
1a001042:	2300      	movs	r3, #0
1a001044:	6203      	str	r3, [r0, #32]
1a001046:	4770      	bx	lr

1a001048 <RingBuffer_Init>:
 ****************************************************************************/

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, int itemSize, int count)
{
	RingBuff->data = buffer;
1a001048:	6001      	str	r1, [r0, #0]
	RingBuff->count = count;
1a00104a:	6043      	str	r3, [r0, #4]
	RingBuff->itemSz = itemSize;
1a00104c:	6082      	str	r2, [r0, #8]
	RingBuff->head = RingBuff->tail = 0;
1a00104e:	2300      	movs	r3, #0
1a001050:	6103      	str	r3, [r0, #16]
1a001052:	60c3      	str	r3, [r0, #12]

	return 1;
}
1a001054:	2001      	movs	r0, #1
1a001056:	4770      	bx	lr

1a001058 <RingBuffer_Insert>:

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
1a001058:	b538      	push	{r3, r4, r5, lr}
	uint8_t *ptr = RingBuff->data;
1a00105a:	6805      	ldr	r5, [r0, #0]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
1a00105c:	68c3      	ldr	r3, [r0, #12]
1a00105e:	6902      	ldr	r2, [r0, #16]
1a001060:	1a9b      	subs	r3, r3, r2
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
1a001062:	6842      	ldr	r2, [r0, #4]

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
1a001064:	4293      	cmp	r3, r2
1a001066:	da0d      	bge.n	1a001084 <RingBuffer_Insert+0x2c>
1a001068:	4604      	mov	r4, r0
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
1a00106a:	68c0      	ldr	r0, [r0, #12]
1a00106c:	3a01      	subs	r2, #1
1a00106e:	4010      	ands	r0, r2
1a001070:	68a2      	ldr	r2, [r4, #8]
	memcpy(ptr, data, RingBuff->itemSz);
1a001072:	fb02 5000 	mla	r0, r2, r0, r5
1a001076:	f001 f97b 	bl	1a002370 <memcpy>
	RingBuff->head++;
1a00107a:	68e3      	ldr	r3, [r4, #12]
1a00107c:	3301      	adds	r3, #1
1a00107e:	60e3      	str	r3, [r4, #12]

	return 1;
1a001080:	2001      	movs	r0, #1
1a001082:	bd38      	pop	{r3, r4, r5, pc}
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;
1a001084:	2000      	movs	r0, #0
	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
	RingBuff->head++;

	return 1;
}
1a001086:	bd38      	pop	{r3, r4, r5, pc}

1a001088 <RingBuffer_InsertMult>:

/* Insert multiple items into Ring Buffer */
int RingBuffer_InsertMult(RINGBUFF_T *RingBuff, const void *data, int num)
{
1a001088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t *ptr = RingBuff->data;
1a00108c:	f8d0 e000 	ldr.w	lr, [r0]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
1a001090:	68c3      	ldr	r3, [r0, #12]
1a001092:	6904      	ldr	r4, [r0, #16]
1a001094:	1b1c      	subs	r4, r3, r4
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
1a001096:	6843      	ldr	r3, [r0, #4]
	int cnt1, cnt2;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
1a001098:	429c      	cmp	r4, r3
1a00109a:	da3a      	bge.n	1a001112 <RingBuffer_InsertMult+0x8a>
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
1a00109c:	68c6      	ldr	r6, [r0, #12]
1a00109e:	6905      	ldr	r5, [r0, #16]
1a0010a0:	1b76      	subs	r6, r6, r5
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of free items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetFree(RINGBUFF_T *RingBuff)
{
	return RingBuff->count - RingBuffer_GetCount(RingBuff);
1a0010a2:	1b9e      	subs	r6, r3, r6
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetFree(RingBuff);
	if (RB_INDH(RingBuff) + cnt1 >= RingBuff->count)
1a0010a4:	68c4      	ldr	r4, [r0, #12]
1a0010a6:	f103 3cff 	add.w	ip, r3, #4294967295
1a0010aa:	ea04 0c0c 	and.w	ip, r4, ip
1a0010ae:	eb0c 0406 	add.w	r4, ip, r6
1a0010b2:	429c      	cmp	r4, r3
1a0010b4:	d302      	bcc.n	1a0010bc <RingBuffer_InsertMult+0x34>
		cnt1 = RingBuff->count - RB_INDH(RingBuff);
1a0010b6:	ebcc 0303 	rsb	r3, ip, r3
1a0010ba:	e000      	b.n	1a0010be <RingBuffer_InsertMult+0x36>
	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetFree(RingBuff);
1a0010bc:	4633      	mov	r3, r6
1a0010be:	460f      	mov	r7, r1
1a0010c0:	4604      	mov	r4, r0
	if (RB_INDH(RingBuff) + cnt1 >= RingBuff->count)
		cnt1 = RingBuff->count - RB_INDH(RingBuff);
	cnt2 -= cnt1;
1a0010c2:	1af6      	subs	r6, r6, r3

	cnt1 = MIN(cnt1, num);
1a0010c4:	4293      	cmp	r3, r2
1a0010c6:	bfa8      	it	ge
1a0010c8:	4613      	movge	r3, r2
1a0010ca:	4698      	mov	r8, r3
	num -= cnt1;
1a0010cc:	1ad5      	subs	r5, r2, r3

	cnt2 = MIN(cnt2, num);
1a0010ce:	42b5      	cmp	r5, r6
1a0010d0:	bfa8      	it	ge
1a0010d2:	4635      	movge	r5, r6
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
1a0010d4:	6882      	ldr	r2, [r0, #8]
	memcpy(ptr, data, cnt1 * RingBuff->itemSz);
1a0010d6:	fb02 e00c 	mla	r0, r2, ip, lr
1a0010da:	fb02 f203 	mul.w	r2, r2, r3
1a0010de:	f001 f947 	bl	1a002370 <memcpy>
	RingBuff->head += cnt1;
1a0010e2:	68e3      	ldr	r3, [r4, #12]
1a0010e4:	eb08 0203 	add.w	r2, r8, r3
1a0010e8:	60e2      	str	r2, [r4, #12]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDH(RingBuff) * RingBuff->itemSz;
1a0010ea:	6820      	ldr	r0, [r4, #0]
1a0010ec:	6863      	ldr	r3, [r4, #4]
1a0010ee:	3b01      	subs	r3, #1
1a0010f0:	4013      	ands	r3, r2
1a0010f2:	68a2      	ldr	r2, [r4, #8]
	data = (const uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(ptr, data, cnt2 * RingBuff->itemSz);
1a0010f4:	fb02 0003 	mla	r0, r2, r3, r0
1a0010f8:	fb02 7108 	mla	r1, r2, r8, r7
1a0010fc:	fb02 f205 	mul.w	r2, r2, r5
1a001100:	f001 f936 	bl	1a002370 <memcpy>
	RingBuff->head += cnt2;
1a001104:	68e3      	ldr	r3, [r4, #12]
1a001106:	442b      	add	r3, r5
1a001108:	60e3      	str	r3, [r4, #12]

	return cnt1 + cnt2;
1a00110a:	eb08 0005 	add.w	r0, r8, r5
1a00110e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *ptr = RingBuff->data;
	int cnt1, cnt2;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;
1a001112:	2000      	movs	r0, #0
	data = (const uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(ptr, data, cnt2 * RingBuff->itemSz);
	RingBuff->head += cnt2;

	return cnt1 + cnt2;
}
1a001114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001118 <RingBuffer_Pop>:

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
1a001118:	b538      	push	{r3, r4, r5, lr}
	uint8_t *ptr = RingBuff->data;
1a00111a:	6805      	ldr	r5, [r0, #0]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
STATIC INLINE int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
1a00111c:	68c2      	ldr	r2, [r0, #12]
1a00111e:	6903      	ldr	r3, [r0, #16]

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
1a001120:	429a      	cmp	r2, r3
1a001122:	d00f      	beq.n	1a001144 <RingBuffer_Pop+0x2c>
1a001124:	4604      	mov	r4, r0
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
1a001126:	6902      	ldr	r2, [r0, #16]
1a001128:	6843      	ldr	r3, [r0, #4]
1a00112a:	3b01      	subs	r3, #1
1a00112c:	4013      	ands	r3, r2
1a00112e:	6882      	ldr	r2, [r0, #8]
	memcpy(data, ptr, RingBuff->itemSz);
1a001130:	4608      	mov	r0, r1
1a001132:	fb02 5103 	mla	r1, r2, r3, r5
1a001136:	f001 f91b 	bl	1a002370 <memcpy>
	RingBuff->tail++;
1a00113a:	6923      	ldr	r3, [r4, #16]
1a00113c:	3301      	adds	r3, #1
1a00113e:	6123      	str	r3, [r4, #16]

	return 1;
1a001140:	2001      	movs	r0, #1
1a001142:	bd38      	pop	{r3, r4, r5, pc}
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;
1a001144:	2000      	movs	r0, #0
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, RingBuff->itemSz);
	RingBuff->tail++;

	return 1;
}
1a001146:	bd38      	pop	{r3, r4, r5, pc}

1a001148 <RingBuffer_PopMult>:

/* Pop multiple items from Ring buffer */
int RingBuffer_PopMult(RINGBUFF_T *RingBuff, void *data, int num)
{
1a001148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t *ptr = RingBuff->data;
1a00114a:	f8d0 e000 	ldr.w	lr, [r0]
1a00114e:	68c4      	ldr	r4, [r0, #12]
1a001150:	6903      	ldr	r3, [r0, #16]
	int cnt1, cnt2;

	/* We cannot insert when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
1a001152:	429c      	cmp	r4, r3
1a001154:	d037      	beq.n	1a0011c6 <RingBuffer_PopMult+0x7e>
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
1a001156:	68c3      	ldr	r3, [r0, #12]
1a001158:	6904      	ldr	r4, [r0, #16]
1a00115a:	1b1b      	subs	r3, r3, r4
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetCount(RingBuff);
	if (RB_INDT(RingBuff) + cnt1 >= RingBuff->count)
1a00115c:	6904      	ldr	r4, [r0, #16]
1a00115e:	6846      	ldr	r6, [r0, #4]
1a001160:	f106 3cff 	add.w	ip, r6, #4294967295
1a001164:	ea04 0c0c 	and.w	ip, r4, ip
1a001168:	eb0c 0403 	add.w	r4, ip, r3
1a00116c:	42b4      	cmp	r4, r6
1a00116e:	d302      	bcc.n	1a001176 <RingBuffer_PopMult+0x2e>
		cnt1 = RingBuff->count - RB_INDT(RingBuff);
1a001170:	ebcc 0606 	rsb	r6, ip, r6
1a001174:	e000      	b.n	1a001178 <RingBuffer_PopMult+0x30>
	/* We cannot insert when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetCount(RingBuff);
1a001176:	461e      	mov	r6, r3
1a001178:	460f      	mov	r7, r1
1a00117a:	4605      	mov	r5, r0
	if (RB_INDT(RingBuff) + cnt1 >= RingBuff->count)
		cnt1 = RingBuff->count - RB_INDT(RingBuff);
	cnt2 -= cnt1;
1a00117c:	1b9b      	subs	r3, r3, r6

	cnt1 = MIN(cnt1, num);
1a00117e:	4296      	cmp	r6, r2
1a001180:	bfa8      	it	ge
1a001182:	4616      	movge	r6, r2
	num -= cnt1;
1a001184:	1b94      	subs	r4, r2, r6

	cnt2 = MIN(cnt2, num);
1a001186:	429c      	cmp	r4, r3
1a001188:	bfa8      	it	ge
1a00118a:	461c      	movge	r4, r3
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
1a00118c:	6882      	ldr	r2, [r0, #8]
	memcpy(data, ptr, cnt1 * RingBuff->itemSz);
1a00118e:	4608      	mov	r0, r1
1a001190:	fb02 e10c 	mla	r1, r2, ip, lr
1a001194:	fb02 f206 	mul.w	r2, r2, r6
1a001198:	f001 f8ea 	bl	1a002370 <memcpy>
	RingBuff->tail += cnt1;
1a00119c:	692b      	ldr	r3, [r5, #16]
1a00119e:	18f2      	adds	r2, r6, r3
1a0011a0:	612a      	str	r2, [r5, #16]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDT(RingBuff) * RingBuff->itemSz;
1a0011a2:	6829      	ldr	r1, [r5, #0]
1a0011a4:	686b      	ldr	r3, [r5, #4]
1a0011a6:	3b01      	subs	r3, #1
1a0011a8:	4013      	ands	r3, r2
1a0011aa:	68aa      	ldr	r2, [r5, #8]
	data = (uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(data, ptr, cnt2 * RingBuff->itemSz);
1a0011ac:	fb02 7006 	mla	r0, r2, r6, r7
1a0011b0:	fb02 1103 	mla	r1, r2, r3, r1
1a0011b4:	fb02 f204 	mul.w	r2, r2, r4
1a0011b8:	f001 f8da 	bl	1a002370 <memcpy>
	RingBuff->tail += cnt2;
1a0011bc:	692b      	ldr	r3, [r5, #16]
1a0011be:	4423      	add	r3, r4
1a0011c0:	612b      	str	r3, [r5, #16]

	return cnt1 + cnt2;
1a0011c2:	1930      	adds	r0, r6, r4
1a0011c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t *ptr = RingBuff->data;
	int cnt1, cnt2;

	/* We cannot insert when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;
1a0011c6:	2000      	movs	r0, #0
	data = (uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(data, ptr, cnt2 * RingBuff->itemSz);
	RingBuff->tail += cnt2;

	return cnt1 + cnt2;
}
1a0011c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0011ca:	bf00      	nop

1a0011cc <Chip_USB_PllSetup>:
/*****************************************************************************
 * Private functions
 ****************************************************************************/

static void Chip_USB_PllSetup(void)
{
1a0011cc:	b508      	push	{r3, lr}
	/* No need to setup anything if PLL is already setup for the frequency */
	if (Chip_Clock_GetClockInputHz(CLKIN_USBPLL) == usbPLLSetup.freq)
1a0011ce:	2007      	movs	r0, #7
1a0011d0:	f000 f9de 	bl	1a001590 <Chip_Clock_GetClockInputHz>
1a0011d4:	4b08      	ldr	r3, [pc, #32]	; (1a0011f8 <Chip_USB_PllSetup+0x2c>)
1a0011d6:	4298      	cmp	r0, r3
1a0011d8:	d00d      	beq.n	1a0011f6 <Chip_USB_PllSetup+0x2a>
		return ;

	/* Setup default USB PLL state for a 480MHz output and attach */
	Chip_Clock_SetupPLL(CLKIN_CRYSTAL, CGU_USB_PLL, &usbPLLSetup);
1a0011da:	2006      	movs	r0, #6
1a0011dc:	2100      	movs	r1, #0
1a0011de:	4a07      	ldr	r2, [pc, #28]	; (1a0011fc <Chip_USB_PllSetup+0x30>)
1a0011e0:	f000 fc90 	bl	1a001b04 <Chip_Clock_SetupPLL>

	/* enable USB PLL */
	Chip_Clock_EnablePLL(CGU_USB_PLL);
1a0011e4:	2000      	movs	r0, #0
1a0011e6:	f000 fcad 	bl	1a001b44 <Chip_Clock_EnablePLL>

	/* Wait for PLL lock */
	while (!(Chip_Clock_GetPLLStatus(CGU_USB_PLL) & CGU_PLL_LOCKED)) {}
1a0011ea:	2000      	movs	r0, #0
1a0011ec:	f000 fcbe 	bl	1a001b6c <Chip_Clock_GetPLLStatus>
1a0011f0:	f010 0f01 	tst.w	r0, #1
1a0011f4:	d0f9      	beq.n	1a0011ea <Chip_USB_PllSetup+0x1e>
1a0011f6:	bd08      	pop	{r3, pc}
1a0011f8:	1c9c3800 	.word	0x1c9c3800
1a0011fc:	1a0025f8 	.word	0x1a0025f8

1a001200 <Chip_USB0_Init>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/

void Chip_USB0_Init(void)
{
1a001200:	b508      	push	{r3, lr}
	/* Set up USB PLL */
	Chip_USB_PllSetup();
1a001202:	f7ff ffe3 	bl	1a0011cc <Chip_USB_PllSetup>

	/* Setup USB0 base clock as clock out from USB PLL */
	Chip_Clock_SetBaseClock( CLK_BASE_USB0, CLKIN_USBPLL, true, true);
1a001206:	2001      	movs	r0, #1
1a001208:	2107      	movs	r1, #7
1a00120a:	4602      	mov	r2, r0
1a00120c:	4603      	mov	r3, r0
1a00120e:	f000 fb4d 	bl	1a0018ac <Chip_Clock_SetBaseClock>

	/* enable USB main clock */
	Chip_Clock_EnableBaseClock(CLK_BASE_USB0);
1a001212:	2001      	movs	r0, #1
1a001214:	f000 fb86 	bl	1a001924 <Chip_Clock_EnableBaseClock>
	Chip_Clock_EnableOpts(CLK_MX_USB0, true, true, 1);
1a001218:	2065      	movs	r0, #101	; 0x65
1a00121a:	2101      	movs	r1, #1
1a00121c:	460a      	mov	r2, r1
1a00121e:	460b      	mov	r3, r1
1a001220:	f000 fbc0 	bl	1a0019a4 <Chip_Clock_EnableOpts>
 * @note	The USB0 PLL & clock should be configured before calling this function. This function
 * should be called before the USB0 registers are accessed.
 */
STATIC INLINE void Chip_CREG_EnableUSB0Phy(void)
{
	LPC_CREG->CREG0 &= ~(1 << 5);
1a001224:	4a02      	ldr	r2, [pc, #8]	; (1a001230 <Chip_USB0_Init+0x30>)
1a001226:	6853      	ldr	r3, [r2, #4]
1a001228:	f023 0320 	bic.w	r3, r3, #32
1a00122c:	6053      	str	r3, [r2, #4]
1a00122e:	bd08      	pop	{r3, pc}
1a001230:	40043000 	.word	0x40043000

1a001234 <Chip_USB1_Init>:
	/* enable USB0 phy */
	Chip_CREG_EnableUSB0Phy();
}

void Chip_USB1_Init(void)
{
1a001234:	b508      	push	{r3, lr}
	/* Setup and enable the PLL */
	Chip_USB_PllSetup();
1a001236:	f7ff ffc9 	bl	1a0011cc <Chip_USB_PllSetup>

	/* USB1 needs a 60MHz clock. To get it, a divider of 4 and then 2 are
	   chained to make a divide by 8 function. Connect the output of
	   divider D to the USB1 base clock. */
	Chip_Clock_SetDivider(CLK_IDIV_A, CLKIN_USBPLL, 4);
1a00123a:	2000      	movs	r0, #0
1a00123c:	2107      	movs	r1, #7
1a00123e:	2204      	movs	r2, #4
1a001240:	f000 f960 	bl	1a001504 <Chip_Clock_SetDivider>
	Chip_Clock_SetDivider(CLK_IDIV_D, CLKIN_IDIVA, 2);
1a001244:	2003      	movs	r0, #3
1a001246:	210c      	movs	r1, #12
1a001248:	2202      	movs	r2, #2
1a00124a:	f000 f95b 	bl	1a001504 <Chip_Clock_SetDivider>
	Chip_Clock_SetBaseClock(CLK_BASE_USB1, CLKIN_IDIVD, true, true);
1a00124e:	2003      	movs	r0, #3
1a001250:	210f      	movs	r1, #15
1a001252:	2201      	movs	r2, #1
1a001254:	4613      	mov	r3, r2
1a001256:	f000 fb29 	bl	1a0018ac <Chip_Clock_SetBaseClock>

	/* enable USB main clock */
	Chip_Clock_EnableBaseClock(CLK_BASE_USB1);
1a00125a:	2003      	movs	r0, #3
1a00125c:	f000 fb62 	bl	1a001924 <Chip_Clock_EnableBaseClock>
	Chip_Clock_EnableOpts(CLK_MX_USB1, true, true, 1);
1a001260:	206e      	movs	r0, #110	; 0x6e
1a001262:	2101      	movs	r1, #1
1a001264:	460a      	mov	r2, r1
1a001266:	460b      	mov	r3, r1
1a001268:	f000 fb9c 	bl	1a0019a4 <Chip_Clock_EnableOpts>
	/* enable USB1_DP and USB1_DN on chip FS phy.*/
	LPC_SCU->SFSUSB = 0x12;
1a00126c:	2212      	movs	r2, #18
1a00126e:	4b02      	ldr	r3, [pc, #8]	; (1a001278 <Chip_USB1_Init+0x44>)
1a001270:	f8c3 2c80 	str.w	r2, [r3, #3200]	; 0xc80
1a001274:	bd08      	pop	{r3, pc}
1a001276:	bf00      	nop
1a001278:	40086000 	.word	0x40086000

1a00127c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a00127c:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00127e:	2069      	movs	r0, #105	; 0x69
1a001280:	f000 fc02 	bl	1a001a88 <Chip_Clock_GetRate>
1a001284:	4b01      	ldr	r3, [pc, #4]	; (1a00128c <SystemCoreClockUpdate+0x10>)
1a001286:	6018      	str	r0, [r3, #0]
1a001288:	bd08      	pop	{r3, pc}
1a00128a:	bf00      	nop
1a00128c:	100000d0 	.word	0x100000d0

1a001290 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001290:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001292:	680b      	ldr	r3, [r1, #0]
1a001294:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001298:	d002      	beq.n	1a0012a0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00129a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00129e:	600b      	str	r3, [r1, #0]
1a0012a0:	4686      	mov	lr, r0
1a0012a2:	2601      	movs	r6, #1
1a0012a4:	e041      	b.n	1a00132a <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a0012a6:	680d      	ldr	r5, [r1, #0]
1a0012a8:	f015 0f40 	tst.w	r5, #64	; 0x40
1a0012ac:	d008      	beq.n	1a0012c0 <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0012ae:	1c7b      	adds	r3, r7, #1
1a0012b0:	fa04 f203 	lsl.w	r2, r4, r3
1a0012b4:	694b      	ldr	r3, [r1, #20]
1a0012b6:	fb03 f302 	mul.w	r3, r3, r2
1a0012ba:	fbb3 f3f6 	udiv	r3, r3, r6
1a0012be:	e004      	b.n	1a0012ca <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a0012c0:	694b      	ldr	r3, [r1, #20]
1a0012c2:	fb04 f303 	mul.w	r3, r4, r3
1a0012c6:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0012ca:	4a19      	ldr	r2, [pc, #100]	; (1a001330 <pll_calc_divs+0xa0>)
1a0012cc:	4293      	cmp	r3, r2
1a0012ce:	d920      	bls.n	1a001312 <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0012d0:	4a18      	ldr	r2, [pc, #96]	; (1a001334 <pll_calc_divs+0xa4>)
1a0012d2:	4293      	cmp	r3, r2
1a0012d4:	d823      	bhi.n	1a00131e <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a0012d6:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0012da:	d103      	bne.n	1a0012e4 <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a0012dc:	1c7a      	adds	r2, r7, #1
1a0012de:	fa23 f202 	lsr.w	r2, r3, r2
1a0012e2:	e000      	b.n	1a0012e6 <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0012e4:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0012e6:	1a85      	subs	r5, r0, r2
1a0012e8:	d502      	bpl.n	1a0012f0 <pll_calc_divs+0x60>
		return -val;
1a0012ea:	f1c5 0c00 	rsb	ip, r5, #0
1a0012ee:	e000      	b.n	1a0012f2 <pll_calc_divs+0x62>
	return val;
1a0012f0:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0012f2:	45e6      	cmp	lr, ip
1a0012f4:	d90d      	bls.n	1a001312 <pll_calc_divs+0x82>
					ppll->nsel = n;
1a0012f6:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a0012f8:	f107 0e01 	add.w	lr, r7, #1
1a0012fc:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a001300:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a001302:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a001304:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001306:	2d00      	cmp	r5, #0
1a001308:	da02      	bge.n	1a001310 <pll_calc_divs+0x80>
		return -val;
1a00130a:	f1c5 0e00 	rsb	lr, r5, #0
1a00130e:	e000      	b.n	1a001312 <pll_calc_divs+0x82>
	return val;
1a001310:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a001312:	3401      	adds	r4, #1
1a001314:	e000      	b.n	1a001318 <pll_calc_divs+0x88>
1a001316:	2401      	movs	r4, #1
1a001318:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a00131c:	ddc3      	ble.n	1a0012a6 <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a00131e:	3701      	adds	r7, #1
1a001320:	e000      	b.n	1a001324 <pll_calc_divs+0x94>
1a001322:	2700      	movs	r7, #0
1a001324:	2f03      	cmp	r7, #3
1a001326:	ddf6      	ble.n	1a001316 <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a001328:	3601      	adds	r6, #1
1a00132a:	2e04      	cmp	r6, #4
1a00132c:	ddf9      	ble.n	1a001322 <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a00132e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001330:	094c5eff 	.word	0x094c5eff
1a001334:	1312d000 	.word	0x1312d000

1a001338 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001338:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00133a:	b099      	sub	sp, #100	; 0x64
1a00133c:	4605      	mov	r5, r0
1a00133e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001340:	4668      	mov	r0, sp
1a001342:	2100      	movs	r1, #0
1a001344:	2260      	movs	r2, #96	; 0x60
1a001346:	f001 f81e 	bl	1a002386 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00134a:	2380      	movs	r3, #128	; 0x80
1a00134c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00134e:	6963      	ldr	r3, [r4, #20]
1a001350:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001352:	7923      	ldrb	r3, [r4, #4]
1a001354:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001358:	4628      	mov	r0, r5
1a00135a:	4669      	mov	r1, sp
1a00135c:	f7ff ff98 	bl	1a001290 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001360:	9b06      	ldr	r3, [sp, #24]
1a001362:	42ab      	cmp	r3, r5
1a001364:	d107      	bne.n	1a001376 <pll_get_frac+0x3e>
		*ppll = pll[0];
1a001366:	466d      	mov	r5, sp
1a001368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00136a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00136c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001374:	e05e      	b.n	1a001434 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001376:	1aeb      	subs	r3, r5, r3
1a001378:	d500      	bpl.n	1a00137c <pll_get_frac+0x44>
		return -val;
1a00137a:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00137c:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a00137e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001384:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001386:	6963      	ldr	r3, [r4, #20]
1a001388:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a00138a:	7923      	ldrb	r3, [r4, #4]
1a00138c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001390:	4628      	mov	r0, r5
1a001392:	a910      	add	r1, sp, #64	; 0x40
1a001394:	f7ff ff7c 	bl	1a001290 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001398:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00139a:	42ab      	cmp	r3, r5
1a00139c:	d107      	bne.n	1a0013ae <pll_get_frac+0x76>
		*ppll = pll[2];
1a00139e:	ad10      	add	r5, sp, #64	; 0x40
1a0013a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0013a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0013a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0013a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0013ac:	e042      	b.n	1a001434 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0013ae:	1aeb      	subs	r3, r5, r3
1a0013b0:	d500      	bpl.n	1a0013b4 <pll_get_frac+0x7c>
		return -val;
1a0013b2:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0013b4:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0013b6:	4b20      	ldr	r3, [pc, #128]	; (1a001438 <pll_get_frac+0x100>)
1a0013b8:	429d      	cmp	r5, r3
1a0013ba:	d812      	bhi.n	1a0013e2 <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a0013bc:	2340      	movs	r3, #64	; 0x40
1a0013be:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0013c0:	6963      	ldr	r3, [r4, #20]
1a0013c2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0013c4:	4628      	mov	r0, r5
1a0013c6:	a908      	add	r1, sp, #32
1a0013c8:	f7ff ff62 	bl	1a001290 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0013cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0013ce:	42ab      	cmp	r3, r5
1a0013d0:	d107      	bne.n	1a0013e2 <pll_get_frac+0xaa>
			*ppll = pll[1];
1a0013d2:	ad08      	add	r5, sp, #32
1a0013d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0013d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0013d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0013dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0013e0:	e028      	b.n	1a001434 <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0013e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0013e4:	1aed      	subs	r5, r5, r3
1a0013e6:	d500      	bpl.n	1a0013ea <pll_get_frac+0xb2>
		return -val;
1a0013e8:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0013ea:	42ae      	cmp	r6, r5
1a0013ec:	dc11      	bgt.n	1a001412 <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a0013ee:	42be      	cmp	r6, r7
1a0013f0:	dc07      	bgt.n	1a001402 <pll_get_frac+0xca>
			*ppll = pll[0];
1a0013f2:	466d      	mov	r5, sp
1a0013f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0013f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0013f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0013fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001400:	e018      	b.n	1a001434 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a001402:	ad10      	add	r5, sp, #64	; 0x40
1a001404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001408:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00140c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001410:	e010      	b.n	1a001434 <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a001412:	42af      	cmp	r7, r5
1a001414:	db07      	blt.n	1a001426 <pll_get_frac+0xee>
			*ppll = pll[1];
1a001416:	ad08      	add	r5, sp, #32
1a001418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00141a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00141c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001420:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001424:	e006      	b.n	1a001434 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a001426:	ad10      	add	r5, sp, #64	; 0x40
1a001428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00142a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00142c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a001434:	b019      	add	sp, #100	; 0x64
1a001436:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001438:	068e7780 	.word	0x068e7780

1a00143c <Chip_Clock_TestMainPLLMultiplier>:

/* Test PLL input values for a specific frequency range */
static uint32_t Chip_Clock_TestMainPLLMultiplier(uint32_t InputHz, uint32_t TestMult, uint32_t MinHz, uint32_t MaxHz)
{
	uint32_t TestHz = TestMult * InputHz;
1a00143c:	fb00 f001 	mul.w	r0, r0, r1

	if ((TestHz < MinHz) || (TestHz > MAX_CLOCK_FREQ) || (TestHz > MaxHz)) {
1a001440:	4290      	cmp	r0, r2
1a001442:	d305      	bcc.n	1a001450 <Chip_Clock_TestMainPLLMultiplier+0x14>
1a001444:	4a05      	ldr	r2, [pc, #20]	; (1a00145c <Chip_Clock_TestMainPLLMultiplier+0x20>)
1a001446:	4290      	cmp	r0, r2
1a001448:	d804      	bhi.n	1a001454 <Chip_Clock_TestMainPLLMultiplier+0x18>
1a00144a:	4298      	cmp	r0, r3
1a00144c:	d804      	bhi.n	1a001458 <Chip_Clock_TestMainPLLMultiplier+0x1c>
1a00144e:	4770      	bx	lr
		TestHz = 0;
1a001450:	2000      	movs	r0, #0
1a001452:	4770      	bx	lr
1a001454:	2000      	movs	r0, #0
1a001456:	4770      	bx	lr
1a001458:	2000      	movs	r0, #0
	}

	return TestHz;
}
1a00145a:	4770      	bx	lr
1a00145c:	0c28cb00 	.word	0x0c28cb00

1a001460 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001460:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001462:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001464:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001466:	e010      	b.n	1a00148a <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001468:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00146c:	0052      	lsls	r2, r2, #1
1a00146e:	4d0d      	ldr	r5, [pc, #52]	; (1a0014a4 <Chip_Clock_FindBaseClock+0x44>)
1a001470:	5aaa      	ldrh	r2, [r5, r2]
1a001472:	4282      	cmp	r2, r0
1a001474:	d806      	bhi.n	1a001484 <Chip_Clock_FindBaseClock+0x24>
1a001476:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00147a:	0052      	lsls	r2, r2, #1
1a00147c:	442a      	add	r2, r5
1a00147e:	8852      	ldrh	r2, [r2, #2]
1a001480:	4282      	cmp	r2, r0
1a001482:	d201      	bcs.n	1a001488 <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001484:	3301      	adds	r3, #1
1a001486:	e000      	b.n	1a00148a <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a001488:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00148a:	291c      	cmp	r1, #28
1a00148c:	d107      	bne.n	1a00149e <Chip_Clock_FindBaseClock+0x3e>
1a00148e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001492:	0052      	lsls	r2, r2, #1
1a001494:	4c03      	ldr	r4, [pc, #12]	; (1a0014a4 <Chip_Clock_FindBaseClock+0x44>)
1a001496:	4422      	add	r2, r4
1a001498:	7914      	ldrb	r4, [r2, #4]
1a00149a:	428c      	cmp	r4, r1
1a00149c:	d1e4      	bne.n	1a001468 <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a00149e:	4608      	mov	r0, r1
1a0014a0:	bc30      	pop	{r4, r5}
1a0014a2:	4770      	bx	lr
1a0014a4:	1a00260c 	.word	0x1a00260c

1a0014a8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0014a8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0014aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0014ae:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0014b0:	4a0d      	ldr	r2, [pc, #52]	; (1a0014e8 <Chip_Clock_EnableCrystal+0x40>)
1a0014b2:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0014b4:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0014b8:	6992      	ldr	r2, [r2, #24]
1a0014ba:	428a      	cmp	r2, r1
1a0014bc:	d001      	beq.n	1a0014c2 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0014be:	4a0a      	ldr	r2, [pc, #40]	; (1a0014e8 <Chip_Clock_EnableCrystal+0x40>)
1a0014c0:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0014c2:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0014c6:	4a09      	ldr	r2, [pc, #36]	; (1a0014ec <Chip_Clock_EnableCrystal+0x44>)
1a0014c8:	6811      	ldr	r1, [r2, #0]
1a0014ca:	4a09      	ldr	r2, [pc, #36]	; (1a0014f0 <Chip_Clock_EnableCrystal+0x48>)
1a0014cc:	4291      	cmp	r1, r2
1a0014ce:	d901      	bls.n	1a0014d4 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0014d0:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0014d4:	4a04      	ldr	r2, [pc, #16]	; (1a0014e8 <Chip_Clock_EnableCrystal+0x40>)
1a0014d6:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0014d8:	9b01      	ldr	r3, [sp, #4]
1a0014da:	1e5a      	subs	r2, r3, #1
1a0014dc:	9201      	str	r2, [sp, #4]
1a0014de:	2b00      	cmp	r3, #0
1a0014e0:	d1fa      	bne.n	1a0014d8 <Chip_Clock_EnableCrystal+0x30>
}
1a0014e2:	b002      	add	sp, #8
1a0014e4:	4770      	bx	lr
1a0014e6:	bf00      	nop
1a0014e8:	40050000 	.word	0x40050000
1a0014ec:	1a002574 	.word	0x1a002574
1a0014f0:	01312cff 	.word	0x01312cff

1a0014f4 <Chip_Clock_DisableCrystal>:

/* Disables the crystal oscillator */
void Chip_Clock_DisableCrystal(void)
{
	/* Disable crystal oscillator */
	LPC_CGU->XTAL_OSC_CTRL |= 1;
1a0014f4:	4a02      	ldr	r2, [pc, #8]	; (1a001500 <Chip_Clock_DisableCrystal+0xc>)
1a0014f6:	6993      	ldr	r3, [r2, #24]
1a0014f8:	f043 0301 	orr.w	r3, r3, #1
1a0014fc:	6193      	str	r3, [r2, #24]
1a0014fe:	4770      	bx	lr
1a001500:	40050000 	.word	0x40050000

1a001504 <Chip_Clock_SetDivider>:
	return (m / (2 * p)) * (freq / n);
}

/* Sets up a CGU clock divider and it's input clock */
void Chip_Clock_SetDivider(CHIP_CGU_IDIV_T Divider, CHIP_CGU_CLKIN_T Input, uint32_t Divisor)
{
1a001504:	b410      	push	{r4}
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001506:	f100 0412 	add.w	r4, r0, #18
1a00150a:	4b11      	ldr	r3, [pc, #68]	; (1a001550 <Chip_Clock_SetDivider+0x4c>)
1a00150c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]

	Divisor--;
1a001510:	3a01      	subs	r2, #1

	if (Input != CLKINPUT_PD) {
1a001512:	2911      	cmp	r1, #17
1a001514:	d013      	beq.n	1a00153e <Chip_Clock_SetDivider+0x3a>
		/* Mask off bits that need to changes */
		reg &= ~((0x1F << 24) | 1 | (CHIP_CGU_IDIV_MASK(Divider) << 2));
1a001516:	4c0f      	ldr	r4, [pc, #60]	; (1a001554 <Chip_Clock_SetDivider+0x50>)
1a001518:	5c24      	ldrb	r4, [r4, r0]
1a00151a:	00a4      	lsls	r4, r4, #2
1a00151c:	f044 54f8 	orr.w	r4, r4, #520093696	; 0x1f000000
1a001520:	f044 0401 	orr.w	r4, r4, #1
1a001524:	ea23 0304 	bic.w	r3, r3, r4

		/* Enable autoblocking, clear PD, and set clock source & divisor */
		LPC_CGU->IDIV_CTRL[Divider] = reg | (1 << 11) | (Input << 24) | (Divisor << 2);
1a001528:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a00152c:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
1a001530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
1a001534:	3012      	adds	r0, #18
1a001536:	4b06      	ldr	r3, [pc, #24]	; (1a001550 <Chip_Clock_SetDivider+0x4c>)
1a001538:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
1a00153c:	e005      	b.n	1a00154a <Chip_Clock_SetDivider+0x46>
	}
	else {
		LPC_CGU->IDIV_CTRL[Divider] = reg | 1;	/* Power down this divider */
1a00153e:	f043 0301 	orr.w	r3, r3, #1
1a001542:	3012      	adds	r0, #18
1a001544:	4a02      	ldr	r2, [pc, #8]	; (1a001550 <Chip_Clock_SetDivider+0x4c>)
1a001546:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}
}
1a00154a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00154e:	4770      	bx	lr
1a001550:	40050000 	.word	0x40050000
1a001554:	1a00267c 	.word	0x1a00267c

1a001558 <Chip_Clock_GetDividerSource>:

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001558:	3012      	adds	r0, #18
1a00155a:	4b05      	ldr	r3, [pc, #20]	; (1a001570 <Chip_Clock_GetDividerSource+0x18>)
1a00155c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001560:	f010 0f01 	tst.w	r0, #1
1a001564:	d102      	bne.n	1a00156c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001566:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00156a:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a00156c:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a00156e:	4770      	bx	lr
1a001570:	40050000 	.word	0x40050000

1a001574 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001574:	f100 0212 	add.w	r2, r0, #18
1a001578:	4b03      	ldr	r3, [pc, #12]	; (1a001588 <Chip_Clock_GetDividerDivisor+0x14>)
1a00157a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00157e:	4b03      	ldr	r3, [pc, #12]	; (1a00158c <Chip_Clock_GetDividerDivisor+0x18>)
1a001580:	5c18      	ldrb	r0, [r3, r0]
}
1a001582:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001586:	4770      	bx	lr
1a001588:	40050000 	.word	0x40050000
1a00158c:	1a00267c 	.word	0x1a00267c

1a001590 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001590:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001592:	2810      	cmp	r0, #16
1a001594:	d80a      	bhi.n	1a0015ac <Chip_Clock_GetClockInputHz+0x1c>
1a001596:	e8df f000 	tbb	[pc, r0]
1a00159a:	0b42      	.short	0x0b42
1a00159c:	091f160d 	.word	0x091f160d
1a0015a0:	2b282522 	.word	0x2b282522
1a0015a4:	322e0909 	.word	0x322e0909
1a0015a8:	3a36      	.short	0x3a36
1a0015aa:	3e          	.byte	0x3e
1a0015ab:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a0015ac:	2000      	movs	r0, #0
1a0015ae:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0015b0:	481e      	ldr	r0, [pc, #120]	; (1a00162c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0015b2:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0015b4:	4b1e      	ldr	r3, [pc, #120]	; (1a001630 <Chip_Clock_GetClockInputHz+0xa0>)
1a0015b6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0015ba:	f003 0307 	and.w	r3, r3, #7
1a0015be:	2b04      	cmp	r3, #4
1a0015c0:	d130      	bne.n	1a001624 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a0015c2:	2000      	movs	r0, #0
1a0015c4:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0015c6:	4b1a      	ldr	r3, [pc, #104]	; (1a001630 <Chip_Clock_GetClockInputHz+0xa0>)
1a0015c8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0015cc:	f003 0307 	and.w	r3, r3, #7
1a0015d0:	2b04      	cmp	r3, #4
1a0015d2:	d029      	beq.n	1a001628 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0015d4:	4817      	ldr	r0, [pc, #92]	; (1a001634 <Chip_Clock_GetClockInputHz+0xa4>)
1a0015d6:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0015d8:	4b17      	ldr	r3, [pc, #92]	; (1a001638 <Chip_Clock_GetClockInputHz+0xa8>)
1a0015da:	6818      	ldr	r0, [r3, #0]
		break;
1a0015dc:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0015de:	4b17      	ldr	r3, [pc, #92]	; (1a00163c <Chip_Clock_GetClockInputHz+0xac>)
1a0015e0:	6818      	ldr	r0, [r3, #0]
		break;
1a0015e2:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0015e4:	4b16      	ldr	r3, [pc, #88]	; (1a001640 <Chip_Clock_GetClockInputHz+0xb0>)
1a0015e6:	6818      	ldr	r0, [r3, #0]
		break;
1a0015e8:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0015ea:	4b15      	ldr	r3, [pc, #84]	; (1a001640 <Chip_Clock_GetClockInputHz+0xb0>)
1a0015ec:	6858      	ldr	r0, [r3, #4]
		break;
1a0015ee:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0015f0:	f000 f916 	bl	1a001820 <Chip_Clock_GetMainPLLHz>
		break;
1a0015f4:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0015f6:	2100      	movs	r1, #0
1a0015f8:	f000 f946 	bl	1a001888 <Chip_Clock_GetDivRate>
		break;
1a0015fc:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0015fe:	2101      	movs	r1, #1
1a001600:	f000 f942 	bl	1a001888 <Chip_Clock_GetDivRate>
		break;
1a001604:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001606:	2102      	movs	r1, #2
1a001608:	f000 f93e 	bl	1a001888 <Chip_Clock_GetDivRate>
		break;
1a00160c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00160e:	2103      	movs	r1, #3
1a001610:	f000 f93a 	bl	1a001888 <Chip_Clock_GetDivRate>
		break;
1a001614:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001616:	2104      	movs	r1, #4
1a001618:	f000 f936 	bl	1a001888 <Chip_Clock_GetDivRate>
		break;
1a00161c:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a00161e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a001622:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001624:	4803      	ldr	r0, [pc, #12]	; (1a001634 <Chip_Clock_GetClockInputHz+0xa4>)
1a001626:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a001628:	4806      	ldr	r0, [pc, #24]	; (1a001644 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a00162a:	bd08      	pop	{r3, pc}
1a00162c:	00b71b00 	.word	0x00b71b00
1a001630:	40043000 	.word	0x40043000
1a001634:	017d7840 	.word	0x017d7840
1a001638:	1a002578 	.word	0x1a002578
1a00163c:	1a002574 	.word	0x1a002574
1a001640:	100000b4 	.word	0x100000b4
1a001644:	02faf080 	.word	0x02faf080

1a001648 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001648:	b538      	push	{r3, r4, r5, lr}
1a00164a:	4605      	mov	r5, r0
1a00164c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00164e:	7908      	ldrb	r0, [r1, #4]
1a001650:	f7ff ff9e 	bl	1a001590 <Chip_Clock_GetClockInputHz>
1a001654:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001656:	4b19      	ldr	r3, [pc, #100]	; (1a0016bc <Chip_Clock_CalcMainPLLValue+0x74>)
1a001658:	442b      	add	r3, r5
1a00165a:	4a19      	ldr	r2, [pc, #100]	; (1a0016c0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a00165c:	4293      	cmp	r3, r2
1a00165e:	d821      	bhi.n	1a0016a4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001660:	b318      	cbz	r0, 1a0016aa <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001662:	2380      	movs	r3, #128	; 0x80
1a001664:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001666:	2300      	movs	r3, #0
1a001668:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00166a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a00166c:	fbb5 f3f0 	udiv	r3, r5, r0
1a001670:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001672:	4a14      	ldr	r2, [pc, #80]	; (1a0016c4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001674:	4295      	cmp	r5, r2
1a001676:	d903      	bls.n	1a001680 <Chip_Clock_CalcMainPLLValue+0x38>
1a001678:	fb03 f000 	mul.w	r0, r3, r0
1a00167c:	42a8      	cmp	r0, r5
1a00167e:	d007      	beq.n	1a001690 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001680:	4628      	mov	r0, r5
1a001682:	4621      	mov	r1, r4
1a001684:	f7ff fe58 	bl	1a001338 <pll_get_frac>
		if (!ppll->nsel) {
1a001688:	68a3      	ldr	r3, [r4, #8]
1a00168a:	b18b      	cbz	r3, 1a0016b0 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a00168c:	3b01      	subs	r3, #1
1a00168e:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a001690:	6923      	ldr	r3, [r4, #16]
1a001692:	b183      	cbz	r3, 1a0016b6 <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a001694:	68e2      	ldr	r2, [r4, #12]
1a001696:	b10a      	cbz	r2, 1a00169c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001698:	3a01      	subs	r2, #1
1a00169a:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a00169c:	3b01      	subs	r3, #1
1a00169e:	6123      	str	r3, [r4, #16]

	return 0;
1a0016a0:	2000      	movs	r0, #0
1a0016a2:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a0016a4:	f04f 30ff 	mov.w	r0, #4294967295
1a0016a8:	bd38      	pop	{r3, r4, r5, pc}
1a0016aa:	f04f 30ff 	mov.w	r0, #4294967295
1a0016ae:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a0016b0:	f04f 30ff 	mov.w	r0, #4294967295
1a0016b4:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a0016b6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a0016ba:	bd38      	pop	{r3, r4, r5, pc}
1a0016bc:	ff6b3a10 	.word	0xff6b3a10
1a0016c0:	0b940510 	.word	0x0b940510
1a0016c4:	094c5eff 	.word	0x094c5eff

1a0016c8 <Chip_Clock_SetupMainPLLMult>:
	return 0;
}

/* Directly set the PLL multipler */
uint32_t Chip_Clock_SetupMainPLLMult(CHIP_CGU_CLKIN_T Input, uint32_t mult)
{
1a0016c8:	b570      	push	{r4, r5, r6, lr}
1a0016ca:	b082      	sub	sp, #8
1a0016cc:	4605      	mov	r5, r0
1a0016ce:	460c      	mov	r4, r1
	volatile uint32_t delay = 250;
1a0016d0:	23fa      	movs	r3, #250	; 0xfa
1a0016d2:	9301      	str	r3, [sp, #4]
	uint32_t freq = Chip_Clock_GetClockInputHz(Input);
1a0016d4:	f7ff ff5c 	bl	1a001590 <Chip_Clock_GetClockInputHz>
	uint32_t msel = 0, nsel = 0, psel = 0, pval = 1;
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0016d8:	4b1e      	ldr	r3, [pc, #120]	; (1a001754 <Chip_Clock_SetupMainPLLMult+0x8c>)
1a0016da:	6c5a      	ldr	r2, [r3, #68]	; 0x44

	freq *= mult;
1a0016dc:	fb04 f000 	mul.w	r0, r4, r0
	msel = mult - 1;
1a0016e0:	1e61      	subs	r1, r4, #1

	PLLReg &= ~(0x1F << 24);/* clear input source bits */
1a0016e2:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
	PLLReg |= Input << 24;	/* set input source bits to parameter */
1a0016e6:	ea42 6205 	orr.w	r2, r2, r5, lsl #24

	/* Clear other PLL input bits */
	PLLReg &= ~((1 << 6) |	/* FBSEL */
1a0016ea:	4b1b      	ldr	r3, [pc, #108]	; (1a001758 <Chip_Clock_SetupMainPLLMult+0x90>)
1a0016ec:	4013      	ands	r3, r2
				(1 << 1) |	/* BYPASS */
				(1 << 7) |	/* DIRECT */
				(0x03 << 8) | (0xFF << 16) | (0x03 << 12));	/* PSEL, MSEL, NSEL- divider ratios */
	
	PLLReg |= (1 << 11);		/* AUTOBLOCK */
1a0016ee:	f443 6600 	orr.w	r6, r3, #2048	; 0x800

	if (freq < 156000000) {
1a0016f2:	4b1a      	ldr	r3, [pc, #104]	; (1a00175c <Chip_Clock_SetupMainPLLMult+0x94>)
1a0016f4:	4298      	cmp	r0, r3
1a0016f6:	d903      	bls.n	1a001700 <Chip_Clock_SetupMainPLLMult+0x38>
1a0016f8:	e012      	b.n	1a001720 <Chip_Clock_SetupMainPLLMult+0x58>
		/* psel is encoded such that 0=1, 1=2, 2=4, 3=8 */
		while ((2 * (pval) * freq) < 156000000) {
			psel++;
1a0016fa:	3401      	adds	r4, #1
			pval *= 2;
1a0016fc:	0052      	lsls	r2, r2, #1
1a0016fe:	e001      	b.n	1a001704 <Chip_Clock_SetupMainPLLMult+0x3c>
1a001700:	2201      	movs	r2, #1
1a001702:	2400      	movs	r4, #0
	
	PLLReg |= (1 << 11);		/* AUTOBLOCK */

	if (freq < 156000000) {
		/* psel is encoded such that 0=1, 1=2, 2=4, 3=8 */
		while ((2 * (pval) * freq) < 156000000) {
1a001704:	fb00 f302 	mul.w	r3, r0, r2
1a001708:	4d14      	ldr	r5, [pc, #80]	; (1a00175c <Chip_Clock_SetupMainPLLMult+0x94>)
1a00170a:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
1a00170e:	d2f4      	bcs.n	1a0016fa <Chip_Clock_SetupMainPLLMult+0x32>
			psel++;
			pval *= 2;
		}

		PLLReg |= (msel << 16) | (nsel << 12) | (psel << 8) | (1 << 6);	/* dividers + FBSEL */
1a001710:	0224      	lsls	r4, r4, #8
1a001712:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a001716:	ea44 0306 	orr.w	r3, r4, r6
1a00171a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00171e:	e00e      	b.n	1a00173e <Chip_Clock_SetupMainPLLMult+0x76>
	}
	else if (freq < 320000000) {
1a001720:	4b0f      	ldr	r3, [pc, #60]	; (1a001760 <Chip_Clock_SetupMainPLLMult+0x98>)
1a001722:	4298      	cmp	r0, r3
1a001724:	d804      	bhi.n	1a001730 <Chip_Clock_SetupMainPLLMult+0x68>
		PLLReg |= (msel << 16) | (nsel << 12) | (psel << 8) | (1 << 7) | (1 << 6);	/* dividers + DIRECT + FBSEL */
1a001726:	ea46 4301 	orr.w	r3, r6, r1, lsl #16
1a00172a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
1a00172e:	e006      	b.n	1a00173e <Chip_Clock_SetupMainPLLMult+0x76>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001730:	4a08      	ldr	r2, [pc, #32]	; (1a001754 <Chip_Clock_SetupMainPLLMult+0x8c>)
1a001732:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001734:	f043 0301 	orr.w	r3, r3, #1
1a001738:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else {
		Chip_Clock_DisableMainPLL();
		return 0;
1a00173a:	2000      	movs	r0, #0
1a00173c:	e008      	b.n	1a001750 <Chip_Clock_SetupMainPLLMult+0x88>
	}
	LPC_CGU->PLL1_CTRL = PLLReg & ~(1 << 0);
1a00173e:	f023 0301 	bic.w	r3, r3, #1
1a001742:	4a04      	ldr	r2, [pc, #16]	; (1a001754 <Chip_Clock_SetupMainPLLMult+0x8c>)
1a001744:	6453      	str	r3, [r2, #68]	; 0x44

	/* Wait for 50uSec */
	while(delay--) {}
1a001746:	9b01      	ldr	r3, [sp, #4]
1a001748:	1e5a      	subs	r2, r3, #1
1a00174a:	9201      	str	r2, [sp, #4]
1a00174c:	2b00      	cmp	r3, #0
1a00174e:	d1fa      	bne.n	1a001746 <Chip_Clock_SetupMainPLLMult+0x7e>

	return freq;
}
1a001750:	b002      	add	sp, #8
1a001752:	bd70      	pop	{r4, r5, r6, pc}
1a001754:	40050000 	.word	0x40050000
1a001758:	ff00cc3d 	.word	0xff00cc3d
1a00175c:	094c5eff 	.word	0x094c5eff
1a001760:	1312cfff 	.word	0x1312cfff

1a001764 <Chip_Clock_SetupMainPLLHz>:
	LPC_CGU->XTAL_OSC_CTRL |= 1;
}

/* Configures the main PLL */
uint32_t Chip_Clock_SetupMainPLLHz(CHIP_CGU_CLKIN_T Input, uint32_t MinHz, uint32_t DesiredHz, uint32_t MaxHz)
{
1a001764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001768:	4682      	mov	sl, r0
1a00176a:	460f      	mov	r7, r1
1a00176c:	4690      	mov	r8, r2
1a00176e:	461e      	mov	r6, r3
	uint32_t freqin = Chip_Clock_GetClockInputHz(Input);
1a001770:	f7ff ff0e 	bl	1a001590 <Chip_Clock_GetClockInputHz>
1a001774:	4605      	mov	r5, r0
	uint32_t Mult, LastMult, MultEnd;
	uint32_t freqout, freqout2;

	if (DesiredHz != 0xFFFFFFFF) {
1a001776:	f1b8 3fff 	cmp.w	r8, #4294967295
1a00177a:	d033      	beq.n	1a0017e4 <Chip_Clock_SetupMainPLLHz+0x80>
		/* Test DesiredHz rounded down */
		Mult = DesiredHz / freqin;
1a00177c:	fbb8 f9f0 	udiv	r9, r8, r0
		freqout = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a001780:	4649      	mov	r1, r9
1a001782:	463a      	mov	r2, r7
1a001784:	4633      	mov	r3, r6
1a001786:	f7ff fe59 	bl	1a00143c <Chip_Clock_TestMainPLLMultiplier>
1a00178a:	4604      	mov	r4, r0

		/* Test DesiredHz rounded up */
		Mult++;
1a00178c:	f109 0b01 	add.w	fp, r9, #1
		freqout2 = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a001790:	4628      	mov	r0, r5
1a001792:	4659      	mov	r1, fp
1a001794:	463a      	mov	r2, r7
1a001796:	4633      	mov	r3, r6
1a001798:	f7ff fe50 	bl	1a00143c <Chip_Clock_TestMainPLLMultiplier>

		if (freqout && !freqout2) {	/* rounding up is no good? set first multiplier */
1a00179c:	b134      	cbz	r4, 1a0017ac <Chip_Clock_SetupMainPLLHz+0x48>
1a00179e:	b928      	cbnz	r0, 1a0017ac <Chip_Clock_SetupMainPLLHz+0x48>
			Mult--;
			return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a0017a0:	4650      	mov	r0, sl
1a0017a2:	4649      	mov	r1, r9
1a0017a4:	f7ff ff90 	bl	1a0016c8 <Chip_Clock_SetupMainPLLMult>
1a0017a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		if (!freqout && freqout2) {	/* didn't work until rounded up? set 2nd multiplier */
1a0017ac:	b934      	cbnz	r4, 1a0017bc <Chip_Clock_SetupMainPLLHz+0x58>
1a0017ae:	b128      	cbz	r0, 1a0017bc <Chip_Clock_SetupMainPLLHz+0x58>
			return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a0017b0:	4650      	mov	r0, sl
1a0017b2:	4659      	mov	r1, fp
1a0017b4:	f7ff ff88 	bl	1a0016c8 <Chip_Clock_SetupMainPLLMult>
1a0017b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}

		if (freqout && freqout2) {	/* either multiplier okay? choose closer one */
1a0017bc:	b194      	cbz	r4, 1a0017e4 <Chip_Clock_SetupMainPLLHz+0x80>
1a0017be:	b188      	cbz	r0, 1a0017e4 <Chip_Clock_SetupMainPLLHz+0x80>
			if ((DesiredHz - freqout) > (freqout2 - DesiredHz)) {
1a0017c0:	ebc4 0408 	rsb	r4, r4, r8
1a0017c4:	ebc8 0000 	rsb	r0, r8, r0
1a0017c8:	4284      	cmp	r4, r0
1a0017ca:	d905      	bls.n	1a0017d8 <Chip_Clock_SetupMainPLLHz+0x74>
				Mult--;
				return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a0017cc:	4650      	mov	r0, sl
1a0017ce:	4649      	mov	r1, r9
1a0017d0:	f7ff ff7a 	bl	1a0016c8 <Chip_Clock_SetupMainPLLMult>
1a0017d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
			else {
				return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a0017d8:	4650      	mov	r0, sl
1a0017da:	4659      	mov	r1, fp
1a0017dc:	f7ff ff74 	bl	1a0016c8 <Chip_Clock_SetupMainPLLMult>
1a0017e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
	}

	/* Neither multiplier okay? Try to start at MinHz and increment.
	   This should find the highest multiplier that is still good */
	Mult = MinHz / freqin;
1a0017e4:	fbb7 f4f5 	udiv	r4, r7, r5
	MultEnd = MaxHz / freqin;
1a0017e8:	fbb6 f8f5 	udiv	r8, r6, r5
	LastMult = 0;
1a0017ec:	f04f 0900 	mov.w	r9, #0
	while (1) {
		freqout = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a0017f0:	4628      	mov	r0, r5
1a0017f2:	4621      	mov	r1, r4
1a0017f4:	463a      	mov	r2, r7
1a0017f6:	4633      	mov	r3, r6
1a0017f8:	f7ff fe20 	bl	1a00143c <Chip_Clock_TestMainPLLMultiplier>

		if (freqout) {
1a0017fc:	b100      	cbz	r0, 1a001800 <Chip_Clock_SetupMainPLLHz+0x9c>
			LastMult = Mult;
1a0017fe:	46a1      	mov	r9, r4
		}

		if (Mult >= MultEnd) {
1a001800:	4544      	cmp	r4, r8
1a001802:	d201      	bcs.n	1a001808 <Chip_Clock_SetupMainPLLHz+0xa4>
			break;
		}
		Mult++;
1a001804:	3401      	adds	r4, #1
	}
1a001806:	e7f3      	b.n	1a0017f0 <Chip_Clock_SetupMainPLLHz+0x8c>

	if (LastMult) {
1a001808:	f1b9 0f00 	cmp.w	r9, #0
1a00180c:	d005      	beq.n	1a00181a <Chip_Clock_SetupMainPLLHz+0xb6>
		return Chip_Clock_SetupMainPLLMult(Input, LastMult);
1a00180e:	4650      	mov	r0, sl
1a001810:	4649      	mov	r1, r9
1a001812:	f7ff ff59 	bl	1a0016c8 <Chip_Clock_SetupMainPLLMult>
1a001816:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return 0;
1a00181a:	2000      	movs	r0, #0
}
1a00181c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a001820 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a001820:	b570      	push	{r4, r5, r6, lr}
1a001822:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001824:	4d16      	ldr	r5, [pc, #88]	; (1a001880 <Chip_Clock_GetMainPLLHz+0x60>)
1a001826:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001828:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a00182c:	f7ff feb0 	bl	1a001590 <Chip_Clock_GetClockInputHz>
1a001830:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001832:	4b14      	ldr	r3, [pc, #80]	; (1a001884 <Chip_Clock_GetMainPLLHz+0x64>)
1a001834:	6818      	ldr	r0, [r3, #0]
1a001836:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001838:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a00183a:	f010 0001 	ands.w	r0, r0, #1
1a00183e:	d01d      	beq.n	1a00187c <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a001840:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001844:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001848:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a00184c:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a001850:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a001852:	3201      	adds	r2, #1
	p = ptab[psel];
1a001854:	a802      	add	r0, sp, #8
1a001856:	4401      	add	r1, r0
1a001858:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a00185c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001860:	d100      	bne.n	1a001864 <Chip_Clock_GetMainPLLHz+0x44>
1a001862:	b125      	cbz	r5, 1a00186e <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a001864:	fbb6 f0f2 	udiv	r0, r6, r2
1a001868:	fb03 f000 	mul.w	r0, r3, r0
1a00186c:	e006      	b.n	1a00187c <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a00186e:	0040      	lsls	r0, r0, #1
1a001870:	fbb3 f3f0 	udiv	r3, r3, r0
1a001874:	fbb6 f0f2 	udiv	r0, r6, r2
1a001878:	fb00 f003 	mul.w	r0, r0, r3
}
1a00187c:	b002      	add	sp, #8
1a00187e:	bd70      	pop	{r4, r5, r6, pc}
1a001880:	40050000 	.word	0x40050000
1a001884:	1a002678 	.word	0x1a002678

1a001888 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a001888:	b538      	push	{r3, r4, r5, lr}
1a00188a:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a00188c:	4608      	mov	r0, r1
1a00188e:	f7ff fe63 	bl	1a001558 <Chip_Clock_GetDividerSource>
1a001892:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001894:	4620      	mov	r0, r4
1a001896:	f7ff fe6d 	bl	1a001574 <Chip_Clock_GetDividerDivisor>
1a00189a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a00189c:	4628      	mov	r0, r5
1a00189e:	f7ff fe77 	bl	1a001590 <Chip_Clock_GetClockInputHz>
1a0018a2:	3401      	adds	r4, #1
}
1a0018a4:	fbb0 f0f4 	udiv	r0, r0, r4
1a0018a8:	bd38      	pop	{r3, r4, r5, pc}
1a0018aa:	bf00      	nop

1a0018ac <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0018ac:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0018ae:	0085      	lsls	r5, r0, #2
1a0018b0:	4c0d      	ldr	r4, [pc, #52]	; (1a0018e8 <Chip_Clock_SetBaseClock+0x3c>)
1a0018b2:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a0018b4:	281b      	cmp	r0, #27
1a0018b6:	d80f      	bhi.n	1a0018d8 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a0018b8:	2911      	cmp	r1, #17
1a0018ba:	d012      	beq.n	1a0018e2 <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0018bc:	4c0b      	ldr	r4, [pc, #44]	; (1a0018ec <Chip_Clock_SetBaseClock+0x40>)
1a0018be:	402c      	ands	r4, r5

			if (autoblocken) {
1a0018c0:	b10a      	cbz	r2, 1a0018c6 <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a0018c2:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a0018c6:	b10b      	cbz	r3, 1a0018cc <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a0018c8:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0018cc:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0018d0:	0080      	lsls	r0, r0, #2
1a0018d2:	4b05      	ldr	r3, [pc, #20]	; (1a0018e8 <Chip_Clock_SetBaseClock+0x3c>)
1a0018d4:	501c      	str	r4, [r3, r0]
1a0018d6:	e004      	b.n	1a0018e2 <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0018d8:	f045 0501 	orr.w	r5, r5, #1
1a0018dc:	0080      	lsls	r0, r0, #2
1a0018de:	4b02      	ldr	r3, [pc, #8]	; (1a0018e8 <Chip_Clock_SetBaseClock+0x3c>)
1a0018e0:	501d      	str	r5, [r3, r0]
	}
}
1a0018e2:	bc30      	pop	{r4, r5}
1a0018e4:	4770      	bx	lr
1a0018e6:	bf00      	nop
1a0018e8:	4005005c 	.word	0x4005005c
1a0018ec:	e0fff7fe 	.word	0xe0fff7fe

1a0018f0 <Chip_Clock_GetBaseClockOpts>:

/* Reads CGU Base Clock clock source information */
void Chip_Clock_GetBaseClockOpts(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T *Input, bool *autoblocken,
								 bool *powerdn)
{
1a0018f0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0018f2:	0085      	lsls	r5, r0, #2
1a0018f4:	4c0a      	ldr	r4, [pc, #40]	; (1a001920 <Chip_Clock_GetBaseClockOpts+0x30>)
1a0018f6:	5964      	ldr	r4, [r4, r5]
	CHIP_CGU_CLKIN_T ClkIn = (CHIP_CGU_CLKIN_T) ((reg  >> 24) & 0x1F );
1a0018f8:	f3c4 6504 	ubfx	r5, r4, #24, #5

	if (BaseClock < CLK_BASE_NONE) {
1a0018fc:	281b      	cmp	r0, #27
1a0018fe:	d807      	bhi.n	1a001910 <Chip_Clock_GetBaseClockOpts+0x20>
		/* Get settings */
		*Input = ClkIn;
1a001900:	700d      	strb	r5, [r1, #0]
		*autoblocken = (reg & (1 << 11)) ? true : false;
1a001902:	f3c4 21c0 	ubfx	r1, r4, #11, #1
1a001906:	7011      	strb	r1, [r2, #0]
		*powerdn = (reg & (1 << 0)) ? true : false;
1a001908:	f004 0401 	and.w	r4, r4, #1
1a00190c:	701c      	strb	r4, [r3, #0]
1a00190e:	e004      	b.n	1a00191a <Chip_Clock_GetBaseClockOpts+0x2a>
	}
	else {
		*Input = CLKINPUT_PD;
1a001910:	2011      	movs	r0, #17
1a001912:	7008      	strb	r0, [r1, #0]
		*powerdn = true;
1a001914:	2101      	movs	r1, #1
1a001916:	7019      	strb	r1, [r3, #0]
		*autoblocken = true;
1a001918:	7011      	strb	r1, [r2, #0]
	}
}
1a00191a:	bc30      	pop	{r4, r5}
1a00191c:	4770      	bx	lr
1a00191e:	bf00      	nop
1a001920:	4005005c 	.word	0x4005005c

1a001924 <Chip_Clock_EnableBaseClock>:

/*Enables a base clock source */
void Chip_Clock_EnableBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	if (BaseClock < CLK_BASE_NONE) {
1a001924:	281b      	cmp	r0, #27
1a001926:	d805      	bhi.n	1a001934 <Chip_Clock_EnableBaseClock+0x10>
		LPC_CGU->BASE_CLK[BaseClock] &= ~1;
1a001928:	0080      	lsls	r0, r0, #2
1a00192a:	4b03      	ldr	r3, [pc, #12]	; (1a001938 <Chip_Clock_EnableBaseClock+0x14>)
1a00192c:	581a      	ldr	r2, [r3, r0]
1a00192e:	f022 0201 	bic.w	r2, r2, #1
1a001932:	501a      	str	r2, [r3, r0]
1a001934:	4770      	bx	lr
1a001936:	bf00      	nop
1a001938:	4005005c 	.word	0x4005005c

1a00193c <Chip_Clock_DisableBaseClock>:
}

/* Disables a base clock source */
void Chip_Clock_DisableBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	if (BaseClock < CLK_BASE_NONE) {
1a00193c:	281b      	cmp	r0, #27
1a00193e:	d805      	bhi.n	1a00194c <Chip_Clock_DisableBaseClock+0x10>
		LPC_CGU->BASE_CLK[BaseClock] |= 1;
1a001940:	0080      	lsls	r0, r0, #2
1a001942:	4b03      	ldr	r3, [pc, #12]	; (1a001950 <Chip_Clock_DisableBaseClock+0x14>)
1a001944:	581a      	ldr	r2, [r3, r0]
1a001946:	f042 0201 	orr.w	r2, r2, #1
1a00194a:	501a      	str	r2, [r3, r0]
1a00194c:	4770      	bx	lr
1a00194e:	bf00      	nop
1a001950:	4005005c 	.word	0x4005005c

1a001954 <Chip_Clock_IsBaseClockEnabled>:
/* Returns base clock enable state */
bool Chip_Clock_IsBaseClockEnabled(CHIP_CGU_BASE_CLK_T BaseClock)
{
	bool enabled;

	if (BaseClock < CLK_BASE_NONE) {
1a001954:	281b      	cmp	r0, #27
1a001956:	d808      	bhi.n	1a00196a <Chip_Clock_IsBaseClockEnabled+0x16>
		enabled = (bool) ((LPC_CGU->BASE_CLK[BaseClock] & 1) == 0);
1a001958:	0080      	lsls	r0, r0, #2
1a00195a:	4b05      	ldr	r3, [pc, #20]	; (1a001970 <Chip_Clock_IsBaseClockEnabled+0x1c>)
1a00195c:	581b      	ldr	r3, [r3, r0]
1a00195e:	f013 0f01 	tst.w	r3, #1
1a001962:	bf0c      	ite	eq
1a001964:	2001      	moveq	r0, #1
1a001966:	2000      	movne	r0, #0
1a001968:	4770      	bx	lr
	}
	else {
		enabled = false;
1a00196a:	2000      	movs	r0, #0
	}

	return enabled;
}
1a00196c:	4770      	bx	lr
1a00196e:	bf00      	nop
1a001970:	4005005c 	.word	0x4005005c

1a001974 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001974:	281b      	cmp	r0, #27
1a001976:	d808      	bhi.n	1a00198a <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001978:	0080      	lsls	r0, r0, #2
1a00197a:	4b06      	ldr	r3, [pc, #24]	; (1a001994 <Chip_Clock_GetBaseClock+0x20>)
1a00197c:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a00197e:	f010 0f01 	tst.w	r0, #1
1a001982:	d104      	bne.n	1a00198e <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001984:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001988:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a00198a:	2011      	movs	r0, #17
1a00198c:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a00198e:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a001990:	4770      	bx	lr
1a001992:	bf00      	nop
1a001994:	4005005c 	.word	0x4005005c

1a001998 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a001998:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00199a:	f7ff ffeb 	bl	1a001974 <Chip_Clock_GetBaseClock>
1a00199e:	f7ff fdf7 	bl	1a001590 <Chip_Clock_GetClockInputHz>
}
1a0019a2:	bd08      	pop	{r3, pc}

1a0019a4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0019a4:	b909      	cbnz	r1, 1a0019aa <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a0019a6:	2101      	movs	r1, #1
1a0019a8:	e000      	b.n	1a0019ac <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a0019aa:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a0019ac:	b10a      	cbz	r2, 1a0019b2 <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a0019ae:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0019b2:	2b02      	cmp	r3, #2
1a0019b4:	d101      	bne.n	1a0019ba <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a0019b6:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0019ba:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0019be:	d305      	bcc.n	1a0019cc <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0019c0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0019c4:	4b04      	ldr	r3, [pc, #16]	; (1a0019d8 <Chip_Clock_EnableOpts+0x34>)
1a0019c6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0019ca:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0019cc:	3020      	adds	r0, #32
1a0019ce:	4b03      	ldr	r3, [pc, #12]	; (1a0019dc <Chip_Clock_EnableOpts+0x38>)
1a0019d0:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0019d4:	4770      	bx	lr
1a0019d6:	bf00      	nop
1a0019d8:	40052000 	.word	0x40052000
1a0019dc:	40051000 	.word	0x40051000

1a0019e0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0019e0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0019e4:	d309      	bcc.n	1a0019fa <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0019e6:	4a09      	ldr	r2, [pc, #36]	; (1a001a0c <Chip_Clock_Enable+0x2c>)
1a0019e8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0019ec:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0019f0:	f043 0301 	orr.w	r3, r3, #1
1a0019f4:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0019f8:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0019fa:	4a05      	ldr	r2, [pc, #20]	; (1a001a10 <Chip_Clock_Enable+0x30>)
1a0019fc:	3020      	adds	r0, #32
1a0019fe:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001a02:	f043 0301 	orr.w	r3, r3, #1
1a001a06:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001a0a:	4770      	bx	lr
1a001a0c:	40052000 	.word	0x40052000
1a001a10:	40051000 	.word	0x40051000

1a001a14 <Chip_Clock_RTCEnable>:
}

/* Enable RTC Clock */
void Chip_Clock_RTCEnable(void)
{
	LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));	/* Reset 32Khz oscillator */
1a001a14:	4b04      	ldr	r3, [pc, #16]	; (1a001a28 <Chip_Clock_RTCEnable+0x14>)
1a001a16:	685a      	ldr	r2, [r3, #4]
1a001a18:	f022 020c 	bic.w	r2, r2, #12
1a001a1c:	605a      	str	r2, [r3, #4]
	LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);	/* Enable 32 kHz & 1 kHz on osc32k and release reset */
1a001a1e:	685a      	ldr	r2, [r3, #4]
1a001a20:	f042 0203 	orr.w	r2, r2, #3
1a001a24:	605a      	str	r2, [r3, #4]
1a001a26:	4770      	bx	lr
1a001a28:	40043000 	.word	0x40043000

1a001a2c <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a001a2c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001a30:	d309      	bcc.n	1a001a46 <Chip_Clock_Disable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a001a32:	4a09      	ldr	r2, [pc, #36]	; (1a001a58 <Chip_Clock_Disable+0x2c>)
1a001a34:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001a38:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001a3c:	f023 0301 	bic.w	r3, r3, #1
1a001a40:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001a44:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a001a46:	4a05      	ldr	r2, [pc, #20]	; (1a001a5c <Chip_Clock_Disable+0x30>)
1a001a48:	3020      	adds	r0, #32
1a001a4a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001a4e:	f023 0301 	bic.w	r3, r3, #1
1a001a52:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001a56:	4770      	bx	lr
1a001a58:	40052000 	.word	0x40052000
1a001a5c:	40051000 	.word	0x40051000

1a001a60 <Chip_Clock_StartPowerDown>:
 * power down sequence started
 */
void Chip_Clock_StartPowerDown(void)
{
	/* Set Power Down bit */
	LPC_CCU1->PM = 1;
1a001a60:	2301      	movs	r3, #1
1a001a62:	4a03      	ldr	r2, [pc, #12]	; (1a001a70 <Chip_Clock_StartPowerDown+0x10>)
1a001a64:	6013      	str	r3, [r2, #0]
	LPC_CCU2->PM = 1;
1a001a66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
1a001a6a:	6013      	str	r3, [r2, #0]
1a001a6c:	4770      	bx	lr
1a001a6e:	bf00      	nop
1a001a70:	40051000 	.word	0x40051000

1a001a74 <Chip_Clock_ClearPowerDown>:
 * Only the clocks with wake up mechanism enabled will be enabled
 */
void Chip_Clock_ClearPowerDown(void)
{
	/* Clear Power Down bit */
	LPC_CCU1->PM = 0;
1a001a74:	2300      	movs	r3, #0
1a001a76:	4a03      	ldr	r2, [pc, #12]	; (1a001a84 <Chip_Clock_ClearPowerDown+0x10>)
1a001a78:	6013      	str	r3, [r2, #0]
	LPC_CCU2->PM = 0;
1a001a7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
1a001a7e:	6013      	str	r3, [r2, #0]
1a001a80:	4770      	bx	lr
1a001a82:	bf00      	nop
1a001a84:	40051000 	.word	0x40051000

1a001a88 <Chip_Clock_GetRate>:
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001a88:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001a8a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001a8e:	d305      	bcc.n	1a001a9c <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001a90:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001a94:	4a0d      	ldr	r2, [pc, #52]	; (1a001acc <Chip_Clock_GetRate+0x44>)
1a001a96:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001a9a:	e004      	b.n	1a001aa6 <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001a9c:	f100 0320 	add.w	r3, r0, #32
1a001aa0:	4a0b      	ldr	r2, [pc, #44]	; (1a001ad0 <Chip_Clock_GetRate+0x48>)
1a001aa2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001aa6:	f014 0f01 	tst.w	r4, #1
1a001aaa:	d00c      	beq.n	1a001ac6 <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001aac:	f7ff fcd8 	bl	1a001460 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001ab0:	f7ff ff72 	bl	1a001998 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a001ab4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001ab8:	d101      	bne.n	1a001abe <Chip_Clock_GetRate+0x36>
			div = 1;
1a001aba:	2301      	movs	r3, #1
1a001abc:	e000      	b.n	1a001ac0 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a001abe:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a001ac0:	fbb0 f0f3 	udiv	r0, r0, r3
1a001ac4:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a001ac6:	2000      	movs	r0, #0
	}

	return rate;
}
1a001ac8:	bd10      	pop	{r4, pc}
1a001aca:	bf00      	nop
1a001acc:	40052000 	.word	0x40052000
1a001ad0:	40051000 	.word	0x40051000

1a001ad4 <Chip_Clock_GetEMCRate>:

/* Get EMC Clock Rate */
uint32_t Chip_Clock_GetEMCRate(void)

{
1a001ad4:	b508      	push	{r3, lr}
	uint32_t ClkFreq;
	uint32_t EMCDiv;
	ClkFreq = Chip_Clock_GetRate(CLK_MX_EMC);
1a001ad6:	2066      	movs	r0, #102	; 0x66
1a001ad8:	f7ff ffd6 	bl	1a001a88 <Chip_Clock_GetRate>

	/* EMC Divider readback at pos 27
	    TODO: just checked but dont mention in UM */
	EMCDiv = (LPC_CCU1->CLKCCU[CLK_MX_EMC_DIV].CFG >> 27) & 0x07;
1a001adc:	4b07      	ldr	r3, [pc, #28]	; (1a001afc <Chip_Clock_GetEMCRate+0x28>)
1a001ade:	f8d3 3478 	ldr.w	r3, [r3, #1144]	; 0x478
1a001ae2:	f3c3 63c2 	ubfx	r3, r3, #27, #3

	/* Check EMC Divider to get real EMC clock out */
	if ((EMCDiv == 1) && (LPC_CREG->CREG6 & (1 << 16))) {
1a001ae6:	2b01      	cmp	r3, #1
1a001ae8:	d106      	bne.n	1a001af8 <Chip_Clock_GetEMCRate+0x24>
1a001aea:	4b05      	ldr	r3, [pc, #20]	; (1a001b00 <Chip_Clock_GetEMCRate+0x2c>)
1a001aec:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001af0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
1a001af4:	d000      	beq.n	1a001af8 <Chip_Clock_GetEMCRate+0x24>
		ClkFreq >>= 1;
1a001af6:	0840      	lsrs	r0, r0, #1
	}
	return ClkFreq;
}
1a001af8:	bd08      	pop	{r3, pc}
1a001afa:	bf00      	nop
1a001afc:	40051000 	.word	0x40051000
1a001b00:	40043000 	.word	0x40043000

1a001b04 <Chip_Clock_SetupPLL>:

/* Sets up the audio or USB PLL */
void Chip_Clock_SetupPLL(CHIP_CGU_CLKIN_T Input, CHIP_CGU_USB_AUDIO_PLL_T pllnum,
						 const CGU_USBAUDIO_PLL_SETUP_T *pPLLSetup)
{
1a001b04:	b410      	push	{r4}
	uint32_t reg = pPLLSetup->ctrl | (Input << 24);
1a001b06:	6813      	ldr	r3, [r2, #0]
1a001b08:	ea43 6000 	orr.w	r0, r3, r0, lsl #24

	/* Setup from passed values */
	LPC_CGU->PLL[pllnum].PLL_CTRL = reg;
1a001b0c:	4b0b      	ldr	r3, [pc, #44]	; (1a001b3c <Chip_Clock_SetupPLL+0x38>)
1a001b0e:	eb03 1401 	add.w	r4, r3, r1, lsl #4
1a001b12:	6220      	str	r0, [r4, #32]
	LPC_CGU->PLL[pllnum].PLL_MDIV = pPLLSetup->mdiv;
1a001b14:	6850      	ldr	r0, [r2, #4]
1a001b16:	1c8c      	adds	r4, r1, #2
1a001b18:	eb03 1304 	add.w	r3, r3, r4, lsl #4
1a001b1c:	6058      	str	r0, [r3, #4]
	LPC_CGU->PLL[pllnum].PLL_NP_DIV = pPLLSetup->ndiv;
1a001b1e:	6890      	ldr	r0, [r2, #8]
1a001b20:	6098      	str	r0, [r3, #8]

	/* Fractional divider is for audio PLL only */
	if (pllnum == CGU_AUDIO_PLL) {
1a001b22:	2901      	cmp	r1, #1
1a001b24:	d102      	bne.n	1a001b2c <Chip_Clock_SetupPLL+0x28>
		LPC_CGU->PLL0AUDIO_FRAC = pPLLSetup->fract;
1a001b26:	68d0      	ldr	r0, [r2, #12]
1a001b28:	4b04      	ldr	r3, [pc, #16]	; (1a001b3c <Chip_Clock_SetupPLL+0x38>)
1a001b2a:	63d8      	str	r0, [r3, #60]	; 0x3c
	}
	audio_usb_pll_freq[pllnum] = pPLLSetup->freq;
1a001b2c:	6912      	ldr	r2, [r2, #16]
1a001b2e:	4b04      	ldr	r3, [pc, #16]	; (1a001b40 <Chip_Clock_SetupPLL+0x3c>)
1a001b30:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
1a001b34:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001b38:	4770      	bx	lr
1a001b3a:	bf00      	nop
1a001b3c:	40050000 	.word	0x40050000
1a001b40:	100000b4 	.word	0x100000b4

1a001b44 <Chip_Clock_EnablePLL>:

/* Enables the audio or USB PLL */
void Chip_Clock_EnablePLL(CHIP_CGU_USB_AUDIO_PLL_T pllnum)
{
	LPC_CGU->PLL[pllnum].PLL_CTRL &= ~1;
1a001b44:	0100      	lsls	r0, r0, #4
1a001b46:	4b03      	ldr	r3, [pc, #12]	; (1a001b54 <Chip_Clock_EnablePLL+0x10>)
1a001b48:	581a      	ldr	r2, [r3, r0]
1a001b4a:	f022 0201 	bic.w	r2, r2, #1
1a001b4e:	501a      	str	r2, [r3, r0]
1a001b50:	4770      	bx	lr
1a001b52:	bf00      	nop
1a001b54:	40050020 	.word	0x40050020

1a001b58 <Chip_Clock_DisablePLL>:
}

/* Disables the audio or USB PLL */
void Chip_Clock_DisablePLL(CHIP_CGU_USB_AUDIO_PLL_T pllnum)
{
	LPC_CGU->PLL[pllnum].PLL_CTRL |= 1;
1a001b58:	0100      	lsls	r0, r0, #4
1a001b5a:	4b03      	ldr	r3, [pc, #12]	; (1a001b68 <Chip_Clock_DisablePLL+0x10>)
1a001b5c:	581a      	ldr	r2, [r3, r0]
1a001b5e:	f042 0201 	orr.w	r2, r2, #1
1a001b62:	501a      	str	r2, [r3, r0]
1a001b64:	4770      	bx	lr
1a001b66:	bf00      	nop
1a001b68:	40050020 	.word	0x40050020

1a001b6c <Chip_Clock_GetPLLStatus>:
}

/* Returns the PLL status */
uint32_t Chip_Clock_GetPLLStatus(CHIP_CGU_USB_AUDIO_PLL_T pllnum)
{
	return LPC_CGU->PLL[pllnum].PLL_STAT;
1a001b6c:	0100      	lsls	r0, r0, #4
1a001b6e:	4b01      	ldr	r3, [pc, #4]	; (1a001b74 <Chip_Clock_GetPLLStatus+0x8>)
1a001b70:	5818      	ldr	r0, [r3, r0]
}
1a001b72:	4770      	bx	lr
1a001b74:	4005001c 	.word	0x4005001c

1a001b78 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001b78:	b570      	push	{r4, r5, r6, lr}
1a001b7a:	b08a      	sub	sp, #40	; 0x28
1a001b7c:	4605      	mov	r5, r0
1a001b7e:	460e      	mov	r6, r1
1a001b80:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 500;
1a001b82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
1a001b86:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001b88:	2806      	cmp	r0, #6
1a001b8a:	d101      	bne.n	1a001b90 <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a001b8c:	f7ff fc8c 	bl	1a0014a8 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001b90:	2004      	movs	r0, #4
1a001b92:	4629      	mov	r1, r5
1a001b94:	2201      	movs	r2, #1
1a001b96:	2300      	movs	r3, #0
1a001b98:	f7ff fe88 	bl	1a0018ac <Chip_Clock_SetBaseClock>
1a001b9c:	4a47      	ldr	r2, [pc, #284]	; (1a001cbc <Chip_SetupCoreClock+0x144>)
1a001b9e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001ba0:	f043 0301 	orr.w	r3, r3, #1
1a001ba4:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001ba6:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001baa:	4630      	mov	r0, r6
1a001bac:	a901      	add	r1, sp, #4
1a001bae:	f7ff fd4b 	bl	1a001648 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001bb2:	4b43      	ldr	r3, [pc, #268]	; (1a001cc0 <Chip_SetupCoreClock+0x148>)
1a001bb4:	429e      	cmp	r6, r3
1a001bb6:	d913      	bls.n	1a001be0 <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a001bb8:	9b01      	ldr	r3, [sp, #4]
1a001bba:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001bbe:	d000      	beq.n	1a001bc2 <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001bc0:	e7fe      	b.n	1a001bc0 <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a001bc2:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001bc6:	d005      	beq.n	1a001bd4 <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001bcc:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 500;
	uint32_t direct = 0, pdivide = 0;
1a001bce:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a001bd0:	2601      	movs	r6, #1
1a001bd2:	e007      	b.n	1a001be4 <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a001bd4:	9b04      	ldr	r3, [sp, #16]
1a001bd6:	3301      	adds	r3, #1
1a001bd8:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a001bda:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 500;
	uint32_t direct = 0, pdivide = 0;
1a001bdc:	2600      	movs	r6, #0
1a001bde:	e001      	b.n	1a001be4 <Chip_SetupCoreClock+0x6c>
1a001be0:	2500      	movs	r5, #0
1a001be2:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001be4:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001be8:	9b01      	ldr	r3, [sp, #4]
1a001bea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001bee:	9a05      	ldr	r2, [sp, #20]
1a001bf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001bf4:	9a03      	ldr	r2, [sp, #12]
1a001bf6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001bfa:	9a04      	ldr	r2, [sp, #16]
1a001bfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001c04:	4a2d      	ldr	r2, [pc, #180]	; (1a001cbc <Chip_SetupCoreClock+0x144>)
1a001c06:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001c08:	4b2c      	ldr	r3, [pc, #176]	; (1a001cbc <Chip_SetupCoreClock+0x144>)
1a001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001c0c:	f013 0f01 	tst.w	r3, #1
1a001c10:	d0fa      	beq.n	1a001c08 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001c12:	2004      	movs	r0, #4
1a001c14:	2109      	movs	r1, #9
1a001c16:	2201      	movs	r2, #1
1a001c18:	2300      	movs	r3, #0
1a001c1a:	f7ff fe47 	bl	1a0018ac <Chip_Clock_SetBaseClock>

	if (direct) {
1a001c1e:	b1ee      	cbz	r6, 1a001c5c <Chip_SetupCoreClock+0xe4>
		delay = 1000;
1a001c20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001c24:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001c28:	1e5a      	subs	r2, r3, #1
1a001c2a:	9209      	str	r2, [sp, #36]	; 0x24
1a001c2c:	2b00      	cmp	r3, #0
1a001c2e:	d1fa      	bne.n	1a001c26 <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a001c30:	9b01      	ldr	r3, [sp, #4]
1a001c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001c36:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001c38:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001c3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001c40:	9a05      	ldr	r2, [sp, #20]
1a001c42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001c46:	9a03      	ldr	r2, [sp, #12]
1a001c48:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001c4c:	9a04      	ldr	r2, [sp, #16]
1a001c4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001c52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001c56:	4a19      	ldr	r2, [pc, #100]	; (1a001cbc <Chip_SetupCoreClock+0x144>)
1a001c58:	6453      	str	r3, [r2, #68]	; 0x44
1a001c5a:	e01c      	b.n	1a001c96 <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a001c5c:	b1dd      	cbz	r5, 1a001c96 <Chip_SetupCoreClock+0x11e>
		delay = 1000;
1a001c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001c62:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001c66:	1e5a      	subs	r2, r3, #1
1a001c68:	9209      	str	r2, [sp, #36]	; 0x24
1a001c6a:	2b00      	cmp	r3, #0
1a001c6c:	d1fa      	bne.n	1a001c64 <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a001c6e:	9b04      	ldr	r3, [sp, #16]
1a001c70:	1e59      	subs	r1, r3, #1
1a001c72:	9104      	str	r1, [sp, #16]
1a001c74:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001c78:	9b01      	ldr	r3, [sp, #4]
1a001c7a:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a001c7e:	9b05      	ldr	r3, [sp, #20]
1a001c80:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a001c84:	9b03      	ldr	r3, [sp, #12]
1a001c86:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a001c8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a001c8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001c92:	4a0a      	ldr	r2, [pc, #40]	; (1a001cbc <Chip_SetupCoreClock+0x144>)
1a001c94:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001c96:	b964      	cbnz	r4, 1a001cb2 <Chip_SetupCoreClock+0x13a>
1a001c98:	e00e      	b.n	1a001cb8 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001c9a:	4a0a      	ldr	r2, [pc, #40]	; (1a001cc4 <Chip_SetupCoreClock+0x14c>)
1a001c9c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a001ca0:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a001ca4:	7859      	ldrb	r1, [r3, #1]
1a001ca6:	789a      	ldrb	r2, [r3, #2]
1a001ca8:	78db      	ldrb	r3, [r3, #3]
1a001caa:	f7ff fdff 	bl	1a0018ac <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001cae:	3401      	adds	r4, #1
1a001cb0:	e000      	b.n	1a001cb4 <Chip_SetupCoreClock+0x13c>
1a001cb2:	2400      	movs	r4, #0
1a001cb4:	2c11      	cmp	r4, #17
1a001cb6:	d9f0      	bls.n	1a001c9a <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001cb8:	b00a      	add	sp, #40	; 0x28
1a001cba:	bd70      	pop	{r4, r5, r6, pc}
1a001cbc:	40050000 	.word	0x40050000
1a001cc0:	068e7780 	.word	0x068e7780
1a001cc4:	1a002684 	.word	0x1a002684

1a001cc8 <Chip_SetupXtalClocking>:

/* Setup system clocking */
void Chip_SetupXtalClocking(void)
{
1a001cc8:	b508      	push	{r3, lr}
	Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001cca:	2006      	movs	r0, #6
1a001ccc:	4902      	ldr	r1, [pc, #8]	; (1a001cd8 <Chip_SetupXtalClocking+0x10>)
1a001cce:	2201      	movs	r2, #1
1a001cd0:	f7ff ff52 	bl	1a001b78 <Chip_SetupCoreClock>
1a001cd4:	bd08      	pop	{r3, pc}
1a001cd6:	bf00      	nop
1a001cd8:	0c28cb00 	.word	0x0c28cb00

1a001cdc <Chip_SetupIrcClocking>:
}

/* Set up and initialize hardware prior to call to main */
void Chip_SetupIrcClocking(void)
{
1a001cdc:	b508      	push	{r3, lr}
	Chip_SetupCoreClock(CLKIN_IRC, MAX_CLOCK_FREQ, true);
1a001cde:	2001      	movs	r0, #1
1a001ce0:	4902      	ldr	r1, [pc, #8]	; (1a001cec <Chip_SetupIrcClocking+0x10>)
1a001ce2:	4602      	mov	r2, r0
1a001ce4:	f7ff ff48 	bl	1a001b78 <Chip_SetupCoreClock>
1a001ce8:	bd08      	pop	{r3, pc}
1a001cea:	bf00      	nop
1a001cec:	0c28cb00 	.word	0x0c28cb00

1a001cf0 <Chip_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Chip_SystemInit(void)
{
1a001cf0:	b508      	push	{r3, lr}
	/* Initial internal clocking */
	Chip_SetupIrcClocking();
1a001cf2:	f7ff fff3 	bl	1a001cdc <Chip_SetupIrcClocking>
1a001cf6:	bd08      	pop	{r3, pc}

1a001cf8 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a001cf8:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a001cfa:	4b10      	ldr	r3, [pc, #64]	; (1a001d3c <fpuInit+0x44>)
1a001cfc:	681b      	ldr	r3, [r3, #0]
1a001cfe:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a001d00:	4b0f      	ldr	r3, [pc, #60]	; (1a001d40 <fpuInit+0x48>)
1a001d02:	681b      	ldr	r3, [r3, #0]
1a001d04:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a001d06:	9a02      	ldr	r2, [sp, #8]
1a001d08:	4b0e      	ldr	r3, [pc, #56]	; (1a001d44 <fpuInit+0x4c>)
1a001d0a:	429a      	cmp	r2, r3
1a001d0c:	d105      	bne.n	1a001d1a <fpuInit+0x22>
1a001d0e:	9a01      	ldr	r2, [sp, #4]
1a001d10:	4b0d      	ldr	r3, [pc, #52]	; (1a001d48 <fpuInit+0x50>)
1a001d12:	429a      	cmp	r2, r3
1a001d14:	d003      	beq.n	1a001d1e <fpuInit+0x26>
1a001d16:	2300      	movs	r3, #0
1a001d18:	e002      	b.n	1a001d20 <fpuInit+0x28>
1a001d1a:	2300      	movs	r3, #0
1a001d1c:	e000      	b.n	1a001d20 <fpuInit+0x28>
1a001d1e:	2301      	movs	r3, #1

	if (vfpPresent) {
1a001d20:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001d24:	d008      	beq.n	1a001d38 <fpuInit+0x40>
		Cpacr = *regCpacr;
1a001d26:	4a09      	ldr	r2, [pc, #36]	; (1a001d4c <fpuInit+0x54>)
1a001d28:	6813      	ldr	r3, [r2, #0]
1a001d2a:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a001d2c:	9b03      	ldr	r3, [sp, #12]
1a001d2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001d32:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a001d34:	9b03      	ldr	r3, [sp, #12]
1a001d36:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a001d38:	b004      	add	sp, #16
1a001d3a:	4770      	bx	lr
1a001d3c:	e000ef40 	.word	0xe000ef40
1a001d40:	e000ef44 	.word	0xe000ef44
1a001d44:	10110021 	.word	0x10110021
1a001d48:	11000011 	.word	0x11000011
1a001d4c:	e000ed88 	.word	0xe000ed88

1a001d50 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a001d50:	4770      	bx	lr
1a001d52:	bf00      	nop

1a001d54 <Chip_GPIO_DeInit>:
}

/* De-Initialize GPIO block */
void Chip_GPIO_DeInit(LPC_GPIO_T *pGPIO)
{
1a001d54:	4770      	bx	lr
1a001d56:	bf00      	nop

1a001d58 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a001d58:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001d5a:	4a17      	ldr	r2, [pc, #92]	; (1a001db8 <ResetISR+0x60>)
1a001d5c:	4b17      	ldr	r3, [pc, #92]	; (1a001dbc <ResetISR+0x64>)
1a001d5e:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a001d60:	4a17      	ldr	r2, [pc, #92]	; (1a001dc0 <ResetISR+0x68>)
1a001d62:	3304      	adds	r3, #4
1a001d64:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001d66:	2300      	movs	r3, #0
1a001d68:	e005      	b.n	1a001d76 <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001d6a:	f04f 31ff 	mov.w	r1, #4294967295
1a001d6e:	4a15      	ldr	r2, [pc, #84]	; (1a001dc4 <ResetISR+0x6c>)
1a001d70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001d74:	3301      	adds	r3, #1
1a001d76:	2b07      	cmp	r3, #7
1a001d78:	d9f7      	bls.n	1a001d6a <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a001d7a:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a001d7c:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a001d7e:	f7fe ff0d 	bl	1a000b9c <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a001d82:	4b11      	ldr	r3, [pc, #68]	; (1a001dc8 <ResetISR+0x70>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a001d84:	e007      	b.n	1a001d96 <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a001d86:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a001d8a:	6818      	ldr	r0, [r3, #0]
1a001d8c:	6859      	ldr	r1, [r3, #4]
1a001d8e:	689a      	ldr	r2, [r3, #8]
1a001d90:	f7fe fa0c 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a001d94:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a001d96:	4a0d      	ldr	r2, [pc, #52]	; (1a001dcc <ResetISR+0x74>)
1a001d98:	4293      	cmp	r3, r2
1a001d9a:	d3f4      	bcc.n	1a001d86 <ResetISR+0x2e>
1a001d9c:	e006      	b.n	1a001dac <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a001d9e:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a001da0:	f854 0b08 	ldr.w	r0, [r4], #8
1a001da4:	6859      	ldr	r1, [r3, #4]
1a001da6:	f7fe fa0f 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a001daa:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a001dac:	4a08      	ldr	r2, [pc, #32]	; (1a001dd0 <ResetISR+0x78>)
1a001dae:	4293      	cmp	r3, r2
1a001db0:	d3f5      	bcc.n	1a001d9e <ResetISR+0x46>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    main();
1a001db2:	f7fe faa5 	bl	1a000300 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a001db6:	e7fe      	b.n	1a001db6 <ResetISR+0x5e>
1a001db8:	10df1000 	.word	0x10df1000
1a001dbc:	40053100 	.word	0x40053100
1a001dc0:	01dff7ff 	.word	0x01dff7ff
1a001dc4:	e000e280 	.word	0xe000e280
1a001dc8:	1a000114 	.word	0x1a000114
1a001dcc:	1a000150 	.word	0x1a000150
1a001dd0:	1a000178 	.word	0x1a000178

1a001dd4 <__aeabi_uldivmod>:
1a001dd4:	b953      	cbnz	r3, 1a001dec <__aeabi_uldivmod+0x18>
1a001dd6:	b94a      	cbnz	r2, 1a001dec <__aeabi_uldivmod+0x18>
1a001dd8:	2900      	cmp	r1, #0
1a001dda:	bf08      	it	eq
1a001ddc:	2800      	cmpeq	r0, #0
1a001dde:	bf1c      	itt	ne
1a001de0:	f04f 31ff 	movne.w	r1, #4294967295
1a001de4:	f04f 30ff 	movne.w	r0, #4294967295
1a001de8:	f000 b83c 	b.w	1a001e64 <__aeabi_idiv0>
1a001dec:	b082      	sub	sp, #8
1a001dee:	46ec      	mov	ip, sp
1a001df0:	e92d 5000 	stmdb	sp!, {ip, lr}
1a001df4:	f000 f81e 	bl	1a001e34 <__gnu_uldivmod_helper>
1a001df8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001dfc:	b002      	add	sp, #8
1a001dfe:	bc0c      	pop	{r2, r3}
1a001e00:	4770      	bx	lr
1a001e02:	bf00      	nop

1a001e04 <__gnu_ldivmod_helper>:
1a001e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001e08:	9c06      	ldr	r4, [sp, #24]
1a001e0a:	4615      	mov	r5, r2
1a001e0c:	4606      	mov	r6, r0
1a001e0e:	460f      	mov	r7, r1
1a001e10:	4698      	mov	r8, r3
1a001e12:	f000 f829 	bl	1a001e68 <__divdi3>
1a001e16:	fb05 f301 	mul.w	r3, r5, r1
1a001e1a:	fb00 3808 	mla	r8, r0, r8, r3
1a001e1e:	fba5 2300 	umull	r2, r3, r5, r0
1a001e22:	1ab2      	subs	r2, r6, r2
1a001e24:	4443      	add	r3, r8
1a001e26:	eb67 0303 	sbc.w	r3, r7, r3
1a001e2a:	e9c4 2300 	strd	r2, r3, [r4]
1a001e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001e32:	bf00      	nop

1a001e34 <__gnu_uldivmod_helper>:
1a001e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001e38:	9c06      	ldr	r4, [sp, #24]
1a001e3a:	4690      	mov	r8, r2
1a001e3c:	4606      	mov	r6, r0
1a001e3e:	460f      	mov	r7, r1
1a001e40:	461d      	mov	r5, r3
1a001e42:	f000 f95f 	bl	1a002104 <__udivdi3>
1a001e46:	fb00 f505 	mul.w	r5, r0, r5
1a001e4a:	fba0 2308 	umull	r2, r3, r0, r8
1a001e4e:	fb08 5501 	mla	r5, r8, r1, r5
1a001e52:	1ab2      	subs	r2, r6, r2
1a001e54:	442b      	add	r3, r5
1a001e56:	eb67 0303 	sbc.w	r3, r7, r3
1a001e5a:	e9c4 2300 	strd	r2, r3, [r4]
1a001e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001e62:	bf00      	nop

1a001e64 <__aeabi_idiv0>:
1a001e64:	4770      	bx	lr
1a001e66:	bf00      	nop

1a001e68 <__divdi3>:
1a001e68:	2900      	cmp	r1, #0
1a001e6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001e6e:	f2c0 80a6 	blt.w	1a001fbe <__divdi3+0x156>
1a001e72:	2600      	movs	r6, #0
1a001e74:	2b00      	cmp	r3, #0
1a001e76:	f2c0 809c 	blt.w	1a001fb2 <__divdi3+0x14a>
1a001e7a:	4688      	mov	r8, r1
1a001e7c:	4694      	mov	ip, r2
1a001e7e:	469e      	mov	lr, r3
1a001e80:	4615      	mov	r5, r2
1a001e82:	4604      	mov	r4, r0
1a001e84:	460f      	mov	r7, r1
1a001e86:	2b00      	cmp	r3, #0
1a001e88:	d13d      	bne.n	1a001f06 <__divdi3+0x9e>
1a001e8a:	428a      	cmp	r2, r1
1a001e8c:	d959      	bls.n	1a001f42 <__divdi3+0xda>
1a001e8e:	fab2 f382 	clz	r3, r2
1a001e92:	b13b      	cbz	r3, 1a001ea4 <__divdi3+0x3c>
1a001e94:	f1c3 0220 	rsb	r2, r3, #32
1a001e98:	409f      	lsls	r7, r3
1a001e9a:	fa20 f202 	lsr.w	r2, r0, r2
1a001e9e:	409d      	lsls	r5, r3
1a001ea0:	4317      	orrs	r7, r2
1a001ea2:	409c      	lsls	r4, r3
1a001ea4:	0c29      	lsrs	r1, r5, #16
1a001ea6:	0c22      	lsrs	r2, r4, #16
1a001ea8:	fbb7 fef1 	udiv	lr, r7, r1
1a001eac:	b2a8      	uxth	r0, r5
1a001eae:	fb01 771e 	mls	r7, r1, lr, r7
1a001eb2:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a001eb6:	fb00 f30e 	mul.w	r3, r0, lr
1a001eba:	42bb      	cmp	r3, r7
1a001ebc:	d90a      	bls.n	1a001ed4 <__divdi3+0x6c>
1a001ebe:	197f      	adds	r7, r7, r5
1a001ec0:	f10e 32ff 	add.w	r2, lr, #4294967295
1a001ec4:	f080 8105 	bcs.w	1a0020d2 <__divdi3+0x26a>
1a001ec8:	42bb      	cmp	r3, r7
1a001eca:	f240 8102 	bls.w	1a0020d2 <__divdi3+0x26a>
1a001ece:	f1ae 0e02 	sub.w	lr, lr, #2
1a001ed2:	442f      	add	r7, r5
1a001ed4:	1aff      	subs	r7, r7, r3
1a001ed6:	b2a4      	uxth	r4, r4
1a001ed8:	fbb7 f3f1 	udiv	r3, r7, r1
1a001edc:	fb01 7713 	mls	r7, r1, r3, r7
1a001ee0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a001ee4:	fb00 f003 	mul.w	r0, r0, r3
1a001ee8:	42b8      	cmp	r0, r7
1a001eea:	d908      	bls.n	1a001efe <__divdi3+0x96>
1a001eec:	197f      	adds	r7, r7, r5
1a001eee:	f103 32ff 	add.w	r2, r3, #4294967295
1a001ef2:	f080 80f0 	bcs.w	1a0020d6 <__divdi3+0x26e>
1a001ef6:	42b8      	cmp	r0, r7
1a001ef8:	f240 80ed 	bls.w	1a0020d6 <__divdi3+0x26e>
1a001efc:	3b02      	subs	r3, #2
1a001efe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a001f02:	2200      	movs	r2, #0
1a001f04:	e003      	b.n	1a001f0e <__divdi3+0xa6>
1a001f06:	428b      	cmp	r3, r1
1a001f08:	d90f      	bls.n	1a001f2a <__divdi3+0xc2>
1a001f0a:	2200      	movs	r2, #0
1a001f0c:	4613      	mov	r3, r2
1a001f0e:	1c34      	adds	r4, r6, #0
1a001f10:	bf18      	it	ne
1a001f12:	2401      	movne	r4, #1
1a001f14:	4260      	negs	r0, r4
1a001f16:	f04f 0500 	mov.w	r5, #0
1a001f1a:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a001f1e:	4058      	eors	r0, r3
1a001f20:	4051      	eors	r1, r2
1a001f22:	1900      	adds	r0, r0, r4
1a001f24:	4169      	adcs	r1, r5
1a001f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a001f2a:	fab3 f283 	clz	r2, r3
1a001f2e:	2a00      	cmp	r2, #0
1a001f30:	f040 8086 	bne.w	1a002040 <__divdi3+0x1d8>
1a001f34:	428b      	cmp	r3, r1
1a001f36:	d302      	bcc.n	1a001f3e <__divdi3+0xd6>
1a001f38:	4584      	cmp	ip, r0
1a001f3a:	f200 80db 	bhi.w	1a0020f4 <__divdi3+0x28c>
1a001f3e:	2301      	movs	r3, #1
1a001f40:	e7e5      	b.n	1a001f0e <__divdi3+0xa6>
1a001f42:	b912      	cbnz	r2, 1a001f4a <__divdi3+0xe2>
1a001f44:	2301      	movs	r3, #1
1a001f46:	fbb3 f5f2 	udiv	r5, r3, r2
1a001f4a:	fab5 f085 	clz	r0, r5
1a001f4e:	2800      	cmp	r0, #0
1a001f50:	d13b      	bne.n	1a001fca <__divdi3+0x162>
1a001f52:	1b78      	subs	r0, r7, r5
1a001f54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001f58:	fa1f fc85 	uxth.w	ip, r5
1a001f5c:	2201      	movs	r2, #1
1a001f5e:	fbb0 f8fe 	udiv	r8, r0, lr
1a001f62:	0c21      	lsrs	r1, r4, #16
1a001f64:	fb0e 0718 	mls	r7, lr, r8, r0
1a001f68:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a001f6c:	fb0c f308 	mul.w	r3, ip, r8
1a001f70:	42bb      	cmp	r3, r7
1a001f72:	d907      	bls.n	1a001f84 <__divdi3+0x11c>
1a001f74:	197f      	adds	r7, r7, r5
1a001f76:	f108 31ff 	add.w	r1, r8, #4294967295
1a001f7a:	d202      	bcs.n	1a001f82 <__divdi3+0x11a>
1a001f7c:	42bb      	cmp	r3, r7
1a001f7e:	f200 80bd 	bhi.w	1a0020fc <__divdi3+0x294>
1a001f82:	4688      	mov	r8, r1
1a001f84:	1aff      	subs	r7, r7, r3
1a001f86:	b2a4      	uxth	r4, r4
1a001f88:	fbb7 f3fe 	udiv	r3, r7, lr
1a001f8c:	fb0e 7713 	mls	r7, lr, r3, r7
1a001f90:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a001f94:	fb0c fc03 	mul.w	ip, ip, r3
1a001f98:	45bc      	cmp	ip, r7
1a001f9a:	d907      	bls.n	1a001fac <__divdi3+0x144>
1a001f9c:	197f      	adds	r7, r7, r5
1a001f9e:	f103 31ff 	add.w	r1, r3, #4294967295
1a001fa2:	d202      	bcs.n	1a001faa <__divdi3+0x142>
1a001fa4:	45bc      	cmp	ip, r7
1a001fa6:	f200 80a7 	bhi.w	1a0020f8 <__divdi3+0x290>
1a001faa:	460b      	mov	r3, r1
1a001fac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001fb0:	e7ad      	b.n	1a001f0e <__divdi3+0xa6>
1a001fb2:	4252      	negs	r2, r2
1a001fb4:	ea6f 0606 	mvn.w	r6, r6
1a001fb8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a001fbc:	e75d      	b.n	1a001e7a <__divdi3+0x12>
1a001fbe:	4240      	negs	r0, r0
1a001fc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a001fc4:	f04f 36ff 	mov.w	r6, #4294967295
1a001fc8:	e754      	b.n	1a001e74 <__divdi3+0xc>
1a001fca:	f1c0 0220 	rsb	r2, r0, #32
1a001fce:	fa24 f102 	lsr.w	r1, r4, r2
1a001fd2:	fa07 f300 	lsl.w	r3, r7, r0
1a001fd6:	4085      	lsls	r5, r0
1a001fd8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001fdc:	40d7      	lsrs	r7, r2
1a001fde:	4319      	orrs	r1, r3
1a001fe0:	fbb7 f2fe 	udiv	r2, r7, lr
1a001fe4:	0c0b      	lsrs	r3, r1, #16
1a001fe6:	fb0e 7712 	mls	r7, lr, r2, r7
1a001fea:	fa1f fc85 	uxth.w	ip, r5
1a001fee:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a001ff2:	fb0c f702 	mul.w	r7, ip, r2
1a001ff6:	429f      	cmp	r7, r3
1a001ff8:	fa04 f400 	lsl.w	r4, r4, r0
1a001ffc:	d907      	bls.n	1a00200e <__divdi3+0x1a6>
1a001ffe:	195b      	adds	r3, r3, r5
1a002000:	f102 30ff 	add.w	r0, r2, #4294967295
1a002004:	d274      	bcs.n	1a0020f0 <__divdi3+0x288>
1a002006:	429f      	cmp	r7, r3
1a002008:	d972      	bls.n	1a0020f0 <__divdi3+0x288>
1a00200a:	3a02      	subs	r2, #2
1a00200c:	442b      	add	r3, r5
1a00200e:	1bdf      	subs	r7, r3, r7
1a002010:	b289      	uxth	r1, r1
1a002012:	fbb7 f8fe 	udiv	r8, r7, lr
1a002016:	fb0e 7318 	mls	r3, lr, r8, r7
1a00201a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a00201e:	fb0c f708 	mul.w	r7, ip, r8
1a002022:	429f      	cmp	r7, r3
1a002024:	d908      	bls.n	1a002038 <__divdi3+0x1d0>
1a002026:	195b      	adds	r3, r3, r5
1a002028:	f108 31ff 	add.w	r1, r8, #4294967295
1a00202c:	d25c      	bcs.n	1a0020e8 <__divdi3+0x280>
1a00202e:	429f      	cmp	r7, r3
1a002030:	d95a      	bls.n	1a0020e8 <__divdi3+0x280>
1a002032:	f1a8 0802 	sub.w	r8, r8, #2
1a002036:	442b      	add	r3, r5
1a002038:	1bd8      	subs	r0, r3, r7
1a00203a:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a00203e:	e78e      	b.n	1a001f5e <__divdi3+0xf6>
1a002040:	f1c2 0320 	rsb	r3, r2, #32
1a002044:	fa2c f103 	lsr.w	r1, ip, r3
1a002048:	fa0e fe02 	lsl.w	lr, lr, r2
1a00204c:	fa20 f703 	lsr.w	r7, r0, r3
1a002050:	ea41 0e0e 	orr.w	lr, r1, lr
1a002054:	fa08 f002 	lsl.w	r0, r8, r2
1a002058:	fa28 f103 	lsr.w	r1, r8, r3
1a00205c:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a002060:	4338      	orrs	r0, r7
1a002062:	fbb1 f8f5 	udiv	r8, r1, r5
1a002066:	0c03      	lsrs	r3, r0, #16
1a002068:	fb05 1118 	mls	r1, r5, r8, r1
1a00206c:	fa1f f78e 	uxth.w	r7, lr
1a002070:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a002074:	fb07 f308 	mul.w	r3, r7, r8
1a002078:	428b      	cmp	r3, r1
1a00207a:	fa0c fc02 	lsl.w	ip, ip, r2
1a00207e:	d909      	bls.n	1a002094 <__divdi3+0x22c>
1a002080:	eb11 010e 	adds.w	r1, r1, lr
1a002084:	f108 39ff 	add.w	r9, r8, #4294967295
1a002088:	d230      	bcs.n	1a0020ec <__divdi3+0x284>
1a00208a:	428b      	cmp	r3, r1
1a00208c:	d92e      	bls.n	1a0020ec <__divdi3+0x284>
1a00208e:	f1a8 0802 	sub.w	r8, r8, #2
1a002092:	4471      	add	r1, lr
1a002094:	1ac9      	subs	r1, r1, r3
1a002096:	b280      	uxth	r0, r0
1a002098:	fbb1 f3f5 	udiv	r3, r1, r5
1a00209c:	fb05 1113 	mls	r1, r5, r3, r1
1a0020a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a0020a4:	fb07 f703 	mul.w	r7, r7, r3
1a0020a8:	428f      	cmp	r7, r1
1a0020aa:	d908      	bls.n	1a0020be <__divdi3+0x256>
1a0020ac:	eb11 010e 	adds.w	r1, r1, lr
1a0020b0:	f103 30ff 	add.w	r0, r3, #4294967295
1a0020b4:	d216      	bcs.n	1a0020e4 <__divdi3+0x27c>
1a0020b6:	428f      	cmp	r7, r1
1a0020b8:	d914      	bls.n	1a0020e4 <__divdi3+0x27c>
1a0020ba:	3b02      	subs	r3, #2
1a0020bc:	4471      	add	r1, lr
1a0020be:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0020c2:	1bc9      	subs	r1, r1, r7
1a0020c4:	fba3 890c 	umull	r8, r9, r3, ip
1a0020c8:	4549      	cmp	r1, r9
1a0020ca:	d309      	bcc.n	1a0020e0 <__divdi3+0x278>
1a0020cc:	d005      	beq.n	1a0020da <__divdi3+0x272>
1a0020ce:	2200      	movs	r2, #0
1a0020d0:	e71d      	b.n	1a001f0e <__divdi3+0xa6>
1a0020d2:	4696      	mov	lr, r2
1a0020d4:	e6fe      	b.n	1a001ed4 <__divdi3+0x6c>
1a0020d6:	4613      	mov	r3, r2
1a0020d8:	e711      	b.n	1a001efe <__divdi3+0x96>
1a0020da:	4094      	lsls	r4, r2
1a0020dc:	4544      	cmp	r4, r8
1a0020de:	d2f6      	bcs.n	1a0020ce <__divdi3+0x266>
1a0020e0:	3b01      	subs	r3, #1
1a0020e2:	e7f4      	b.n	1a0020ce <__divdi3+0x266>
1a0020e4:	4603      	mov	r3, r0
1a0020e6:	e7ea      	b.n	1a0020be <__divdi3+0x256>
1a0020e8:	4688      	mov	r8, r1
1a0020ea:	e7a5      	b.n	1a002038 <__divdi3+0x1d0>
1a0020ec:	46c8      	mov	r8, r9
1a0020ee:	e7d1      	b.n	1a002094 <__divdi3+0x22c>
1a0020f0:	4602      	mov	r2, r0
1a0020f2:	e78c      	b.n	1a00200e <__divdi3+0x1a6>
1a0020f4:	4613      	mov	r3, r2
1a0020f6:	e70a      	b.n	1a001f0e <__divdi3+0xa6>
1a0020f8:	3b02      	subs	r3, #2
1a0020fa:	e757      	b.n	1a001fac <__divdi3+0x144>
1a0020fc:	f1a8 0802 	sub.w	r8, r8, #2
1a002100:	442f      	add	r7, r5
1a002102:	e73f      	b.n	1a001f84 <__divdi3+0x11c>

1a002104 <__udivdi3>:
1a002104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002108:	2b00      	cmp	r3, #0
1a00210a:	d144      	bne.n	1a002196 <__udivdi3+0x92>
1a00210c:	428a      	cmp	r2, r1
1a00210e:	4615      	mov	r5, r2
1a002110:	4604      	mov	r4, r0
1a002112:	d94f      	bls.n	1a0021b4 <__udivdi3+0xb0>
1a002114:	fab2 f782 	clz	r7, r2
1a002118:	460e      	mov	r6, r1
1a00211a:	b14f      	cbz	r7, 1a002130 <__udivdi3+0x2c>
1a00211c:	f1c7 0320 	rsb	r3, r7, #32
1a002120:	40b9      	lsls	r1, r7
1a002122:	fa20 f603 	lsr.w	r6, r0, r3
1a002126:	fa02 f507 	lsl.w	r5, r2, r7
1a00212a:	430e      	orrs	r6, r1
1a00212c:	fa00 f407 	lsl.w	r4, r0, r7
1a002130:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002134:	0c23      	lsrs	r3, r4, #16
1a002136:	fbb6 f0fe 	udiv	r0, r6, lr
1a00213a:	b2af      	uxth	r7, r5
1a00213c:	fb0e 6110 	mls	r1, lr, r0, r6
1a002140:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002144:	fb07 f100 	mul.w	r1, r7, r0
1a002148:	4299      	cmp	r1, r3
1a00214a:	d909      	bls.n	1a002160 <__udivdi3+0x5c>
1a00214c:	195b      	adds	r3, r3, r5
1a00214e:	f100 32ff 	add.w	r2, r0, #4294967295
1a002152:	f080 80ec 	bcs.w	1a00232e <__udivdi3+0x22a>
1a002156:	4299      	cmp	r1, r3
1a002158:	f240 80e9 	bls.w	1a00232e <__udivdi3+0x22a>
1a00215c:	3802      	subs	r0, #2
1a00215e:	442b      	add	r3, r5
1a002160:	1a5a      	subs	r2, r3, r1
1a002162:	b2a4      	uxth	r4, r4
1a002164:	fbb2 f3fe 	udiv	r3, r2, lr
1a002168:	fb0e 2213 	mls	r2, lr, r3, r2
1a00216c:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a002170:	fb07 f703 	mul.w	r7, r7, r3
1a002174:	4297      	cmp	r7, r2
1a002176:	d908      	bls.n	1a00218a <__udivdi3+0x86>
1a002178:	1952      	adds	r2, r2, r5
1a00217a:	f103 31ff 	add.w	r1, r3, #4294967295
1a00217e:	f080 80d8 	bcs.w	1a002332 <__udivdi3+0x22e>
1a002182:	4297      	cmp	r7, r2
1a002184:	f240 80d5 	bls.w	1a002332 <__udivdi3+0x22e>
1a002188:	3b02      	subs	r3, #2
1a00218a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a00218e:	2600      	movs	r6, #0
1a002190:	4631      	mov	r1, r6
1a002192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002196:	428b      	cmp	r3, r1
1a002198:	d847      	bhi.n	1a00222a <__udivdi3+0x126>
1a00219a:	fab3 f683 	clz	r6, r3
1a00219e:	2e00      	cmp	r6, #0
1a0021a0:	d148      	bne.n	1a002234 <__udivdi3+0x130>
1a0021a2:	428b      	cmp	r3, r1
1a0021a4:	d302      	bcc.n	1a0021ac <__udivdi3+0xa8>
1a0021a6:	4282      	cmp	r2, r0
1a0021a8:	f200 80cd 	bhi.w	1a002346 <__udivdi3+0x242>
1a0021ac:	2001      	movs	r0, #1
1a0021ae:	4631      	mov	r1, r6
1a0021b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0021b4:	b912      	cbnz	r2, 1a0021bc <__udivdi3+0xb8>
1a0021b6:	2501      	movs	r5, #1
1a0021b8:	fbb5 f5f2 	udiv	r5, r5, r2
1a0021bc:	fab5 f885 	clz	r8, r5
1a0021c0:	f1b8 0f00 	cmp.w	r8, #0
1a0021c4:	d177      	bne.n	1a0022b6 <__udivdi3+0x1b2>
1a0021c6:	1b4a      	subs	r2, r1, r5
1a0021c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0021cc:	b2af      	uxth	r7, r5
1a0021ce:	2601      	movs	r6, #1
1a0021d0:	fbb2 f0fe 	udiv	r0, r2, lr
1a0021d4:	0c23      	lsrs	r3, r4, #16
1a0021d6:	fb0e 2110 	mls	r1, lr, r0, r2
1a0021da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a0021de:	fb07 f300 	mul.w	r3, r7, r0
1a0021e2:	428b      	cmp	r3, r1
1a0021e4:	d907      	bls.n	1a0021f6 <__udivdi3+0xf2>
1a0021e6:	1949      	adds	r1, r1, r5
1a0021e8:	f100 32ff 	add.w	r2, r0, #4294967295
1a0021ec:	d202      	bcs.n	1a0021f4 <__udivdi3+0xf0>
1a0021ee:	428b      	cmp	r3, r1
1a0021f0:	f200 80ba 	bhi.w	1a002368 <__udivdi3+0x264>
1a0021f4:	4610      	mov	r0, r2
1a0021f6:	1ac9      	subs	r1, r1, r3
1a0021f8:	b2a4      	uxth	r4, r4
1a0021fa:	fbb1 f3fe 	udiv	r3, r1, lr
1a0021fe:	fb0e 1113 	mls	r1, lr, r3, r1
1a002202:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a002206:	fb07 f703 	mul.w	r7, r7, r3
1a00220a:	42a7      	cmp	r7, r4
1a00220c:	d908      	bls.n	1a002220 <__udivdi3+0x11c>
1a00220e:	1964      	adds	r4, r4, r5
1a002210:	f103 32ff 	add.w	r2, r3, #4294967295
1a002214:	f080 808f 	bcs.w	1a002336 <__udivdi3+0x232>
1a002218:	42a7      	cmp	r7, r4
1a00221a:	f240 808c 	bls.w	1a002336 <__udivdi3+0x232>
1a00221e:	3b02      	subs	r3, #2
1a002220:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a002224:	4631      	mov	r1, r6
1a002226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00222a:	2600      	movs	r6, #0
1a00222c:	4630      	mov	r0, r6
1a00222e:	4631      	mov	r1, r6
1a002230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002234:	f1c6 0420 	rsb	r4, r6, #32
1a002238:	fa22 f504 	lsr.w	r5, r2, r4
1a00223c:	40b3      	lsls	r3, r6
1a00223e:	432b      	orrs	r3, r5
1a002240:	fa20 fc04 	lsr.w	ip, r0, r4
1a002244:	fa01 f706 	lsl.w	r7, r1, r6
1a002248:	fa21 f504 	lsr.w	r5, r1, r4
1a00224c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a002250:	ea4c 0707 	orr.w	r7, ip, r7
1a002254:	fbb5 f8fe 	udiv	r8, r5, lr
1a002258:	0c39      	lsrs	r1, r7, #16
1a00225a:	fb0e 5518 	mls	r5, lr, r8, r5
1a00225e:	fa1f fc83 	uxth.w	ip, r3
1a002262:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a002266:	fb0c f108 	mul.w	r1, ip, r8
1a00226a:	42a9      	cmp	r1, r5
1a00226c:	fa02 f206 	lsl.w	r2, r2, r6
1a002270:	d904      	bls.n	1a00227c <__udivdi3+0x178>
1a002272:	18ed      	adds	r5, r5, r3
1a002274:	f108 34ff 	add.w	r4, r8, #4294967295
1a002278:	d367      	bcc.n	1a00234a <__udivdi3+0x246>
1a00227a:	46a0      	mov	r8, r4
1a00227c:	1a6d      	subs	r5, r5, r1
1a00227e:	b2bf      	uxth	r7, r7
1a002280:	fbb5 f4fe 	udiv	r4, r5, lr
1a002284:	fb0e 5514 	mls	r5, lr, r4, r5
1a002288:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a00228c:	fb0c fc04 	mul.w	ip, ip, r4
1a002290:	458c      	cmp	ip, r1
1a002292:	d904      	bls.n	1a00229e <__udivdi3+0x19a>
1a002294:	18c9      	adds	r1, r1, r3
1a002296:	f104 35ff 	add.w	r5, r4, #4294967295
1a00229a:	d35c      	bcc.n	1a002356 <__udivdi3+0x252>
1a00229c:	462c      	mov	r4, r5
1a00229e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a0022a2:	ebcc 0101 	rsb	r1, ip, r1
1a0022a6:	fba4 2302 	umull	r2, r3, r4, r2
1a0022aa:	4299      	cmp	r1, r3
1a0022ac:	d348      	bcc.n	1a002340 <__udivdi3+0x23c>
1a0022ae:	d044      	beq.n	1a00233a <__udivdi3+0x236>
1a0022b0:	4620      	mov	r0, r4
1a0022b2:	2600      	movs	r6, #0
1a0022b4:	e76c      	b.n	1a002190 <__udivdi3+0x8c>
1a0022b6:	f1c8 0420 	rsb	r4, r8, #32
1a0022ba:	fa01 f308 	lsl.w	r3, r1, r8
1a0022be:	fa05 f508 	lsl.w	r5, r5, r8
1a0022c2:	fa20 f704 	lsr.w	r7, r0, r4
1a0022c6:	40e1      	lsrs	r1, r4
1a0022c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0022cc:	431f      	orrs	r7, r3
1a0022ce:	fbb1 f6fe 	udiv	r6, r1, lr
1a0022d2:	0c3a      	lsrs	r2, r7, #16
1a0022d4:	fb0e 1116 	mls	r1, lr, r6, r1
1a0022d8:	fa1f fc85 	uxth.w	ip, r5
1a0022dc:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a0022e0:	fb0c f206 	mul.w	r2, ip, r6
1a0022e4:	429a      	cmp	r2, r3
1a0022e6:	fa00 f408 	lsl.w	r4, r0, r8
1a0022ea:	d907      	bls.n	1a0022fc <__udivdi3+0x1f8>
1a0022ec:	195b      	adds	r3, r3, r5
1a0022ee:	f106 31ff 	add.w	r1, r6, #4294967295
1a0022f2:	d237      	bcs.n	1a002364 <__udivdi3+0x260>
1a0022f4:	429a      	cmp	r2, r3
1a0022f6:	d935      	bls.n	1a002364 <__udivdi3+0x260>
1a0022f8:	3e02      	subs	r6, #2
1a0022fa:	442b      	add	r3, r5
1a0022fc:	1a9b      	subs	r3, r3, r2
1a0022fe:	b2bf      	uxth	r7, r7
1a002300:	fbb3 f0fe 	udiv	r0, r3, lr
1a002304:	fb0e 3310 	mls	r3, lr, r0, r3
1a002308:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a00230c:	fb0c f100 	mul.w	r1, ip, r0
1a002310:	4299      	cmp	r1, r3
1a002312:	d907      	bls.n	1a002324 <__udivdi3+0x220>
1a002314:	195b      	adds	r3, r3, r5
1a002316:	f100 32ff 	add.w	r2, r0, #4294967295
1a00231a:	d221      	bcs.n	1a002360 <__udivdi3+0x25c>
1a00231c:	4299      	cmp	r1, r3
1a00231e:	d91f      	bls.n	1a002360 <__udivdi3+0x25c>
1a002320:	3802      	subs	r0, #2
1a002322:	442b      	add	r3, r5
1a002324:	1a5a      	subs	r2, r3, r1
1a002326:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a00232a:	4667      	mov	r7, ip
1a00232c:	e750      	b.n	1a0021d0 <__udivdi3+0xcc>
1a00232e:	4610      	mov	r0, r2
1a002330:	e716      	b.n	1a002160 <__udivdi3+0x5c>
1a002332:	460b      	mov	r3, r1
1a002334:	e729      	b.n	1a00218a <__udivdi3+0x86>
1a002336:	4613      	mov	r3, r2
1a002338:	e772      	b.n	1a002220 <__udivdi3+0x11c>
1a00233a:	40b0      	lsls	r0, r6
1a00233c:	4290      	cmp	r0, r2
1a00233e:	d2b7      	bcs.n	1a0022b0 <__udivdi3+0x1ac>
1a002340:	1e60      	subs	r0, r4, #1
1a002342:	2600      	movs	r6, #0
1a002344:	e724      	b.n	1a002190 <__udivdi3+0x8c>
1a002346:	4630      	mov	r0, r6
1a002348:	e722      	b.n	1a002190 <__udivdi3+0x8c>
1a00234a:	42a9      	cmp	r1, r5
1a00234c:	d995      	bls.n	1a00227a <__udivdi3+0x176>
1a00234e:	f1a8 0802 	sub.w	r8, r8, #2
1a002352:	441d      	add	r5, r3
1a002354:	e792      	b.n	1a00227c <__udivdi3+0x178>
1a002356:	458c      	cmp	ip, r1
1a002358:	d9a0      	bls.n	1a00229c <__udivdi3+0x198>
1a00235a:	3c02      	subs	r4, #2
1a00235c:	4419      	add	r1, r3
1a00235e:	e79e      	b.n	1a00229e <__udivdi3+0x19a>
1a002360:	4610      	mov	r0, r2
1a002362:	e7df      	b.n	1a002324 <__udivdi3+0x220>
1a002364:	460e      	mov	r6, r1
1a002366:	e7c9      	b.n	1a0022fc <__udivdi3+0x1f8>
1a002368:	3802      	subs	r0, #2
1a00236a:	4429      	add	r1, r5
1a00236c:	e743      	b.n	1a0021f6 <__udivdi3+0xf2>
1a00236e:	bf00      	nop

1a002370 <memcpy>:
1a002370:	b510      	push	{r4, lr}
1a002372:	1e43      	subs	r3, r0, #1
1a002374:	440a      	add	r2, r1
1a002376:	4291      	cmp	r1, r2
1a002378:	d004      	beq.n	1a002384 <memcpy+0x14>
1a00237a:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00237e:	f803 4f01 	strb.w	r4, [r3, #1]!
1a002382:	e7f8      	b.n	1a002376 <memcpy+0x6>
1a002384:	bd10      	pop	{r4, pc}

1a002386 <memset>:
1a002386:	4402      	add	r2, r0
1a002388:	4603      	mov	r3, r0
1a00238a:	4293      	cmp	r3, r2
1a00238c:	d002      	beq.n	1a002394 <memset+0xe>
1a00238e:	f803 1b01 	strb.w	r1, [r3], #1
1a002392:	e7fa      	b.n	1a00238a <memset+0x4>
1a002394:	4770      	bx	lr
1a002396:	0000      	movs	r0, r0
1a002398:	616c6f48 	.word	0x616c6f48
1a00239c:	6e756d20 	.word	0x6e756d20
1a0023a0:	64206f64 	.word	0x64206f64
1a0023a4:	65647365 	.word	0x65647365
1a0023a8:	55444520 	.word	0x55444520
1a0023ac:	41494320 	.word	0x41494320
1a0023b0:	584e2041 	.word	0x584e2041
1a0023b4:	0d0a2150 	.word	0x0d0a2150
1a0023b8:	00000000 	.word	0x00000000
1a0023bc:	72206f4c 	.word	0x72206f4c
1a0023c0:	62696365 	.word	0x62696365
1a0023c4:	206f6469 	.word	0x206f6469
1a0023c8:	20726f70 	.word	0x20726f70
1a0023cc:	65756c42 	.word	0x65756c42
1a0023d0:	746f6f74 	.word	0x746f6f74
1a0023d4:	73652068 	.word	0x73652068
1a0023d8:	0000203a 	.word	0x0000203a

1a0023dc <ultrasonicSensorsIrqMap>:
1a0023dc:	00020100                                ....

1a0023e0 <gpioPinsInit>:
1a0023e0:	02000104 00050701 05010d03 04080100     ................
1a0023f0:	02020002 02000304 00000403 04070002     ................
1a002400:	030c0300 09050402 05040103 04030208     ................
1a002410:	04020305 06040504 0802000c 03000b06     ................
1a002420:	00090607 07060503 060f0504 03030004     ................
1a002430:	02000404 00050404 06040502 04060200     ................
1a002440:	0c050408 05040a04 0003010e 14010a00     ................
1a002450:	010f0000 0d000012 00001101 0010010c     ................
1a002460:	07070300 000f0300 01000001 00000000     ................
1a002470:	000a0600 08060603 06100504 04030005     ................
1a002480:	03000106 04090400 04010d05 010b0000     ................
1a002490:	0200000f 00000001 00010104 02010800     ................
1a0024a0:	01090000 09010006 05040002 04010200     ................
1a0024b0:	02020105 02020504 0e00000a 01000b02     ................
1a0024c0:	000c020b 00040c01 04000200 01020001     ................
1a0024d0:	02000204 00030402 03070302 070b0300     ................
1a0024e0:	0c030004 03000507 0006070d 01020e03     ................
1a0024f0:	04010504 06020006 02000504 00040405     ................
1a002500:	08040402 040c0504 0d050409 05040a04     ................
1a002510:	0005010e 00000801                       ........

1a002518 <lpcUarts>:
1a002518:	40081000 06020406 00180205 40081000     ...@...........@
1a002528:	09070509 00180706 40082000 00000000     ......... .@....
1a002538:	00190000 400c1000 07060107 001a0602     .......@........
1a002548:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a002558:	02020302 001b0204                       ........

1a002560 <gpioLEDBits>:
1a002560:	0b010e00 00050c01 02050105 12376000     .............`7.
1a002570:	00005634                                4V..

1a002574 <OscRateIn>:
1a002574:	00b71b00                                ....

1a002578 <ExtRateIn>:
1a002578:	00000000                                ....

1a00257c <pinmuxing>:
1a00257c:	00400a02 00400b02 00400c02 00440002     ..@...@...@...D.
1a00258c:	00440102 00440202 00520302 00520402     ..D...D...R...R.
1a00259c:	00520509 00570609 00570206 00500001     ..R...W...W...P.
1a0025ac:	00500101 00500201 00500601 00f30f01     ..P...P...P.....
1a0025bc:	00f71001 00f31101 00b31201 00f01301     ................
1a0025cc:	00b31401 00b60707 00f20000 00b60100     ................

1a0025dc <InitClkStates>:
1a0025dc:	00010308 00010307 01010f01              ............

1a0025e8 <UART_PClock>:
1a0025e8:	00820081 00a200a1                       ........

1a0025f0 <UART_BClock>:
1a0025f0:	01a201c2 01620182                       ......b.

1a0025f8 <usbPLLSetup>:
1a0025f8:	0000601d 06167ffa 00000000 00000000     .`..............
1a002608:	1c9c3800                                .8..

1a00260c <periph_to_base>:
1a00260c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00261c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00262c:	000100e0 01000100 01200003 00060120     .......... . ...
1a00263c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00264c:	01820013 00120182 01a201a2 01c20011     ................
1a00265c:	001001c2 01e201e2 0202000f 000e0202     ................
1a00266c:	02220222 0223000d 001c0223 08040201     "."...#.#.......
1a00267c:	0f0f0f03 000000ff                       ........

1a002684 <InitClkStates>:
1a002684:	00010100 00010909 0001090a 01010701     ................
1a002694:	00010902 00010906 0101090c 0001090d     ................
1a0026a4:	0001090e 0001090f 00010910 00010911     ................
1a0026b4:	00010912 00010913 00011114 00011119     ................
1a0026c4:	0001111a 0001111b                       ........
